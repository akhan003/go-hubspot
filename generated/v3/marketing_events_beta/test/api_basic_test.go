/*
Marketing Marketing Events

Testing BasicAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package marketing_events_beta

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_marketing_events_beta_BasicAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BasicAPIService DeleteMarketingV3MarketingEventsEventsExternalEventId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var externalEventId string

		httpRes, err := apiClient.BasicAPI.DeleteMarketingV3MarketingEventsEventsExternalEventId(context.Background(), externalEventId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BasicAPIService GetMarketingV3MarketingEventsEventsExternalEventId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var externalEventId string

		resp, httpRes, err := apiClient.BasicAPI.GetMarketingV3MarketingEventsEventsExternalEventId(context.Background(), externalEventId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BasicAPIService PatchMarketingV3MarketingEventsEventsExternalEventId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var externalEventId string

		resp, httpRes, err := apiClient.BasicAPI.PatchMarketingV3MarketingEventsEventsExternalEventId(context.Background(), externalEventId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BasicAPIService PostMarketingV3MarketingEventsEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.BasicAPI.PostMarketingV3MarketingEventsEvents(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BasicAPIService PostMarketingV3MarketingEventsEventsExternalEventIdCancel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var externalEventId string

		resp, httpRes, err := apiClient.BasicAPI.PostMarketingV3MarketingEventsEventsExternalEventIdCancel(context.Background(), externalEventId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BasicAPIService PutMarketingV3MarketingEventsEventsExternalEventId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var externalEventId string

		resp, httpRes, err := apiClient.BasicAPI.PutMarketingV3MarketingEventsEventsExternalEventId(context.Background(), externalEventId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
