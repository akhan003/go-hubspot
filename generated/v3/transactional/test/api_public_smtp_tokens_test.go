/*
Marketing Transactional Single Send

Testing PublicSmtpTokensAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package transactional

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_transactional_PublicSmtpTokensAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PublicSmtpTokensAPIService DeleteMarketingV3TransactionalSmtpTokensTokenId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tokenId string

		httpRes, err := apiClient.PublicSmtpTokensAPI.DeleteMarketingV3TransactionalSmtpTokensTokenId(context.Background(), tokenId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicSmtpTokensAPIService GetMarketingV3TransactionalSmtpTokens", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PublicSmtpTokensAPI.GetMarketingV3TransactionalSmtpTokens(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicSmtpTokensAPIService GetMarketingV3TransactionalSmtpTokensTokenId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tokenId string

		resp, httpRes, err := apiClient.PublicSmtpTokensAPI.GetMarketingV3TransactionalSmtpTokensTokenId(context.Background(), tokenId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicSmtpTokensAPIService PostMarketingV3TransactionalSmtpTokens", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PublicSmtpTokensAPI.PostMarketingV3TransactionalSmtpTokens(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicSmtpTokensAPIService PostMarketingV3TransactionalSmtpTokensTokenIdPasswordReset", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tokenId string

		resp, httpRes, err := apiClient.PublicSmtpTokensAPI.PostMarketingV3TransactionalSmtpTokensTokenIdPasswordReset(context.Background(), tokenId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
