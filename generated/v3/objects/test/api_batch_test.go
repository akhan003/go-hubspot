/*
CRM Objects

Testing BatchApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package objects

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_objects_BatchApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BatchApiService BatchArchive", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var objectType string

		httpRes, err := apiClient.BatchApi.BatchArchive(context.Background(), objectType).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BatchApiService BatchCreate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var objectType string

		resp, httpRes, err := apiClient.BatchApi.BatchCreate(context.Background(), objectType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BatchApiService BatchRead", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var objectType string

		resp, httpRes, err := apiClient.BatchApi.BatchRead(context.Background(), objectType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BatchApiService BatchUpdate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var objectType string

		resp, httpRes, err := apiClient.BatchApi.BatchUpdate(context.Background(), objectType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
