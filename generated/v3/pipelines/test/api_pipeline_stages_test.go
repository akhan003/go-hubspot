/*
Pipelines

Testing PipelineStagesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package pipelines

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_pipelines_PipelineStagesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PipelineStagesAPIService StagesArchive", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var objectType string
		var pipelineId string
		var stageId string

		httpRes, err := apiClient.PipelineStagesAPI.StagesArchive(context.Background(), objectType, pipelineId, stageId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PipelineStagesAPIService StagesCreate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var objectType string
		var pipelineId string

		resp, httpRes, err := apiClient.PipelineStagesAPI.StagesCreate(context.Background(), objectType, pipelineId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PipelineStagesAPIService StagesGetAll", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var objectType string
		var pipelineId string

		resp, httpRes, err := apiClient.PipelineStagesAPI.StagesGetAll(context.Background(), objectType, pipelineId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PipelineStagesAPIService StagesGetByID", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var objectType string
		var pipelineId string
		var stageId string

		resp, httpRes, err := apiClient.PipelineStagesAPI.StagesGetByID(context.Background(), objectType, pipelineId, stageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PipelineStagesAPIService StagesReplace", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var objectType string
		var pipelineId string
		var stageId string

		resp, httpRes, err := apiClient.PipelineStagesAPI.StagesReplace(context.Background(), objectType, pipelineId, stageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PipelineStagesAPIService StagesUpdate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var objectType string
		var pipelineId string
		var stageId string

		resp, httpRes, err := apiClient.PipelineStagesAPI.StagesUpdate(context.Background(), objectType, pipelineId, stageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
