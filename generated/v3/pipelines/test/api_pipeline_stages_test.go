/*
CRM Pipelines

Testing PipelineStagesApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package pipelines

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_pipelines_PipelineStagesApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PipelineStagesApiService StagesArchive", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var objectType string
		var pipelineId string
		var stageId string

		httpRes, err := apiClient.PipelineStagesApi.StagesArchive(context.Background(), objectType, pipelineId, stageId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PipelineStagesApiService StagesCreate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var objectType string
		var pipelineId string

		resp, httpRes, err := apiClient.PipelineStagesApi.StagesCreate(context.Background(), objectType, pipelineId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PipelineStagesApiService StagesGetAll", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var objectType string
		var pipelineId string

		resp, httpRes, err := apiClient.PipelineStagesApi.StagesGetAll(context.Background(), objectType, pipelineId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PipelineStagesApiService StagesGetByID", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var objectType string
		var pipelineId string
		var stageId string

		resp, httpRes, err := apiClient.PipelineStagesApi.StagesGetByID(context.Background(), objectType, pipelineId, stageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PipelineStagesApiService StagesReplace", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var objectType string
		var pipelineId string
		var stageId string

		resp, httpRes, err := apiClient.PipelineStagesApi.StagesReplace(context.Background(), objectType, pipelineId, stageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PipelineStagesApiService StagesUpdate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var objectType string
		var pipelineId string
		var stageId string

		resp, httpRes, err := apiClient.PipelineStagesApi.StagesUpdate(context.Background(), objectType, pipelineId, stageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
