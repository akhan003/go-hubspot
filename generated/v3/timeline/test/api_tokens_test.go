/*
Timeline events

Testing TokensApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package timeline

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_timeline_TokensApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TokensApiService TemplatesTokensArchive", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var eventTemplateId string
		var tokenName string
		var appId int32

		httpRes, err := apiClient.TokensApi.TemplatesTokensArchive(context.Background(), eventTemplateId, tokenName, appId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TokensApiService TemplatesTokensCreate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var eventTemplateId string
		var appId int32

		resp, httpRes, err := apiClient.TokensApi.TemplatesTokensCreate(context.Background(), eventTemplateId, appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TokensApiService TemplatesTokensUpdate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var eventTemplateId string
		var tokenName string
		var appId int32

		resp, httpRes, err := apiClient.TokensApi.TemplatesTokensUpdate(context.Background(), eventTemplateId, tokenName, appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
