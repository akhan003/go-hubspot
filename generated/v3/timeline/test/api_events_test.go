/*
Timeline events

Testing EventsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package timeline

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_timeline_EventsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test EventsApiService BatchCreate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.EventsApi.BatchCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventsApiService Create", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.EventsApi.Create(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventsApiService GetByID", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var eventTemplateId string
		var eventId string

		resp, httpRes, err := apiClient.EventsApi.GetByID(context.Background(), eventTemplateId, eventId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventsApiService GetDetailByID", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var eventTemplateId string
		var eventId string

		resp, httpRes, err := apiClient.EventsApi.GetDetailByID(context.Background(), eventTemplateId, eventId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventsApiService GetRenderByID", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var eventTemplateId string
		var eventId string

		resp, httpRes, err := apiClient.EventsApi.GetRenderByID(context.Background(), eventTemplateId, eventId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
