/*
Hubdb

Testing RowsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package hubdb

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_hubdb_RowsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RowsAPIService DeleteCmsV3HubdbTablesTableIdOrNameRowsRowIdDraft", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableIdOrName string
		var rowId string

		httpRes, err := apiClient.RowsAPI.DeleteCmsV3HubdbTablesTableIdOrNameRowsRowIdDraft(context.Background(), tableIdOrName, rowId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RowsAPIService GetCmsV3HubdbTablesTableIdOrNameRows", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableIdOrName string

		resp, httpRes, err := apiClient.RowsAPI.GetCmsV3HubdbTablesTableIdOrNameRows(context.Background(), tableIdOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RowsAPIService GetCmsV3HubdbTablesTableIdOrNameRowsDraft", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableIdOrName string

		resp, httpRes, err := apiClient.RowsAPI.GetCmsV3HubdbTablesTableIdOrNameRowsDraft(context.Background(), tableIdOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RowsAPIService GetCmsV3HubdbTablesTableIdOrNameRowsRowId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableIdOrName string
		var rowId string

		resp, httpRes, err := apiClient.RowsAPI.GetCmsV3HubdbTablesTableIdOrNameRowsRowId(context.Background(), tableIdOrName, rowId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RowsAPIService GetCmsV3HubdbTablesTableIdOrNameRowsRowIdDraft", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableIdOrName string
		var rowId string

		resp, httpRes, err := apiClient.RowsAPI.GetCmsV3HubdbTablesTableIdOrNameRowsRowIdDraft(context.Background(), tableIdOrName, rowId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RowsAPIService PatchCmsV3HubdbTablesTableIdOrNameRowsRowIdDraft", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableIdOrName string
		var rowId string

		resp, httpRes, err := apiClient.RowsAPI.PatchCmsV3HubdbTablesTableIdOrNameRowsRowIdDraft(context.Background(), tableIdOrName, rowId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RowsAPIService PostCmsV3HubdbTablesTableIdOrNameRows", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableIdOrName string

		resp, httpRes, err := apiClient.RowsAPI.PostCmsV3HubdbTablesTableIdOrNameRows(context.Background(), tableIdOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RowsAPIService PostCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftClone", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableIdOrName string
		var rowId string

		resp, httpRes, err := apiClient.RowsAPI.PostCmsV3HubdbTablesTableIdOrNameRowsRowIdDraftClone(context.Background(), tableIdOrName, rowId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RowsAPIService PutCmsV3HubdbTablesTableIdOrNameRowsRowIdDraft", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableIdOrName string
		var rowId string

		resp, httpRes, err := apiClient.RowsAPI.PutCmsV3HubdbTablesTableIdOrNameRowsRowIdDraft(context.Background(), tableIdOrName, rowId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
