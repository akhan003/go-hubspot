/*
HubDB endpoints

Testing TablesApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package hubdb

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_hubdb_TablesApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TablesApiService ArchiveTable", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableIdOrName string

		httpRes, err := apiClient.TablesApi.ArchiveTable(context.Background(), tableIdOrName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TablesApiService CloneDraftTable", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableIdOrName string

		resp, httpRes, err := apiClient.TablesApi.CloneDraftTable(context.Background(), tableIdOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TablesApiService CreateTable", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TablesApi.CreateTable(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TablesApiService ExportDraftTable", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableIdOrName string

		resp, httpRes, err := apiClient.TablesApi.ExportDraftTable(context.Background(), tableIdOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TablesApiService ExportTable", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableIdOrName string

		resp, httpRes, err := apiClient.TablesApi.ExportTable(context.Background(), tableIdOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TablesApiService GetAllDraftTables", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TablesApi.GetAllDraftTables(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TablesApiService GetAllTables", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TablesApi.GetAllTables(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TablesApiService GetDraftTableDetailsByID", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableIdOrName string

		resp, httpRes, err := apiClient.TablesApi.GetDraftTableDetailsByID(context.Background(), tableIdOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TablesApiService GetTableDetails", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableIdOrName string

		resp, httpRes, err := apiClient.TablesApi.GetTableDetails(context.Background(), tableIdOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TablesApiService ImportDraftTable", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableIdOrName string

		resp, httpRes, err := apiClient.TablesApi.ImportDraftTable(context.Background(), tableIdOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TablesApiService PublishDraftTable", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableIdOrName string

		resp, httpRes, err := apiClient.TablesApi.PublishDraftTable(context.Background(), tableIdOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TablesApiService ResetDraftTable", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableIdOrName string

		resp, httpRes, err := apiClient.TablesApi.ResetDraftTable(context.Background(), tableIdOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TablesApiService UnpublishTable", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableIdOrName string

		resp, httpRes, err := apiClient.TablesApi.UnpublishTable(context.Background(), tableIdOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TablesApiService UpdateDraftTable", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableIdOrName string

		resp, httpRes, err := apiClient.TablesApi.UpdateDraftTable(context.Background(), tableIdOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
