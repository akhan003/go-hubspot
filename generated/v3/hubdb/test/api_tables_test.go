/*
Hubdb

Testing TablesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package hubdb

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_hubdb_TablesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TablesAPIService DeleteCmsV3HubdbTablesTableIdOrName", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableIdOrName string

		httpRes, err := apiClient.TablesAPI.DeleteCmsV3HubdbTablesTableIdOrName(context.Background(), tableIdOrName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TablesAPIService GetCmsV3HubdbTables", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TablesAPI.GetCmsV3HubdbTables(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TablesAPIService GetCmsV3HubdbTablesDraft", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TablesAPI.GetCmsV3HubdbTablesDraft(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TablesAPIService GetCmsV3HubdbTablesTableIdOrName", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableIdOrName string

		resp, httpRes, err := apiClient.TablesAPI.GetCmsV3HubdbTablesTableIdOrName(context.Background(), tableIdOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TablesAPIService GetCmsV3HubdbTablesTableIdOrNameDraft", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableIdOrName string

		resp, httpRes, err := apiClient.TablesAPI.GetCmsV3HubdbTablesTableIdOrNameDraft(context.Background(), tableIdOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TablesAPIService GetCmsV3HubdbTablesTableIdOrNameDraftExport", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableIdOrName string

		resp, httpRes, err := apiClient.TablesAPI.GetCmsV3HubdbTablesTableIdOrNameDraftExport(context.Background(), tableIdOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TablesAPIService GetCmsV3HubdbTablesTableIdOrNameExport", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableIdOrName string

		resp, httpRes, err := apiClient.TablesAPI.GetCmsV3HubdbTablesTableIdOrNameExport(context.Background(), tableIdOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TablesAPIService PatchCmsV3HubdbTablesTableIdOrNameDraft", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableIdOrName string

		resp, httpRes, err := apiClient.TablesAPI.PatchCmsV3HubdbTablesTableIdOrNameDraft(context.Background(), tableIdOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TablesAPIService PostCmsV3HubdbTables", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TablesAPI.PostCmsV3HubdbTables(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TablesAPIService PostCmsV3HubdbTablesTableIdOrNameDraftClone", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableIdOrName string

		resp, httpRes, err := apiClient.TablesAPI.PostCmsV3HubdbTablesTableIdOrNameDraftClone(context.Background(), tableIdOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TablesAPIService PostCmsV3HubdbTablesTableIdOrNameDraftImport", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableIdOrName string

		resp, httpRes, err := apiClient.TablesAPI.PostCmsV3HubdbTablesTableIdOrNameDraftImport(context.Background(), tableIdOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TablesAPIService PostCmsV3HubdbTablesTableIdOrNameDraftPublish", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableIdOrName string

		resp, httpRes, err := apiClient.TablesAPI.PostCmsV3HubdbTablesTableIdOrNameDraftPublish(context.Background(), tableIdOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TablesAPIService PostCmsV3HubdbTablesTableIdOrNameDraftReset", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableIdOrName string

		resp, httpRes, err := apiClient.TablesAPI.PostCmsV3HubdbTablesTableIdOrNameDraftReset(context.Background(), tableIdOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TablesAPIService PostCmsV3HubdbTablesTableIdOrNameUnpublish", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tableIdOrName string

		resp, httpRes, err := apiClient.TablesAPI.PostCmsV3HubdbTablesTableIdOrNameUnpublish(context.Background(), tableIdOrName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
