/*
Hubdb

HubDB is a relational data store that presents data as rows, columns, and cells in a table, much like a spreadsheet. HubDB tables can be added or modified [in the HubSpot CMS](https://knowledge.hubspot.com/cos-general/how-to-edit-hubdb-tables), but you can also use the API endpoints documented here. For more information on HubDB tables and using their data on a HubSpot site, see the [CMS developers site](https://designers.hubspot.com/docs/tools/hubdb). You can also see the [documentation for dynamic pages](https://designers.hubspot.com/docs/tutorials/how-to-build-dynamic-pages-with-hubdb) for more details about the `useForPages` field.  HubDB tables support `draft` and `published` versions. This allows you to update data in the table, either for testing or to allow for a manual approval process, without affecting any live pages using the existing data. Draft data can be reviewed, and published by a user working in HubSpot or published via the API. Draft data can also be discarded, allowing users to go back to the published version of the data without disrupting it. If a table is set to be `allowed for public access`, you can access the published version of the table and rows without any authentication by specifying the portal id via the query parameter `portalId`.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hubdb

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"os"
	"reflect"
	"strings"
	"time"
)

// TablesAPIService TablesAPI service
type TablesAPIService service

type ApiDeleteCmsV3HubdbTablesTableIdOrNameRequest struct {
	ctx           context.Context
	ApiService    *TablesAPIService
	tableIdOrName string
}

func (r ApiDeleteCmsV3HubdbTablesTableIdOrNameRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCmsV3HubdbTablesTableIdOrNameExecute(r)
}

/*
DeleteCmsV3HubdbTablesTableIdOrName Archive a table

Archive (soft delete) an existing HubDB table. This archives both the published and draft versions.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param tableIdOrName The ID or name of the table to archive.
	@return ApiDeleteCmsV3HubdbTablesTableIdOrNameRequest
*/
func (a *TablesAPIService) DeleteCmsV3HubdbTablesTableIdOrName(ctx context.Context, tableIdOrName string) ApiDeleteCmsV3HubdbTablesTableIdOrNameRequest {
	return ApiDeleteCmsV3HubdbTablesTableIdOrNameRequest{
		ApiService:    a,
		ctx:           ctx,
		tableIdOrName: tableIdOrName,
	}
}

// Execute executes the request
func (a *TablesAPIService) DeleteCmsV3HubdbTablesTableIdOrNameExecute(r ApiDeleteCmsV3HubdbTablesTableIdOrNameRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TablesAPIService.DeleteCmsV3HubdbTablesTableIdOrName")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cms/v3/hubdb/tables/{tableIdOrName}"
	localVarPath = strings.Replace(localVarPath, "{"+"tableIdOrName"+"}", url.PathEscape(parameterValueToString(r.tableIdOrName, "tableIdOrName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps_legacy"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app-legacy"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCmsV3HubdbTablesRequest struct {
	ctx           context.Context
	ApiService    *TablesAPIService
	sort          *[]string
	after         *string
	limit         *int32
	createdAt     *time.Time
	createdAfter  *time.Time
	createdBefore *time.Time
	updatedAt     *time.Time
	updatedAfter  *time.Time
	updatedBefore *time.Time
	archived      *bool
}

// Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default.
func (r ApiGetCmsV3HubdbTablesRequest) Sort(sort []string) ApiGetCmsV3HubdbTablesRequest {
	r.sort = &sort
	return r
}

// The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results.
func (r ApiGetCmsV3HubdbTablesRequest) After(after string) ApiGetCmsV3HubdbTablesRequest {
	r.after = &after
	return r
}

// The maximum number of results to return. Default is 1000.
func (r ApiGetCmsV3HubdbTablesRequest) Limit(limit int32) ApiGetCmsV3HubdbTablesRequest {
	r.limit = &limit
	return r
}

// Only return tables created at exactly the specified time.
func (r ApiGetCmsV3HubdbTablesRequest) CreatedAt(createdAt time.Time) ApiGetCmsV3HubdbTablesRequest {
	r.createdAt = &createdAt
	return r
}

// Only return tables created after the specified time.
func (r ApiGetCmsV3HubdbTablesRequest) CreatedAfter(createdAfter time.Time) ApiGetCmsV3HubdbTablesRequest {
	r.createdAfter = &createdAfter
	return r
}

// Only return tables created before the specified time.
func (r ApiGetCmsV3HubdbTablesRequest) CreatedBefore(createdBefore time.Time) ApiGetCmsV3HubdbTablesRequest {
	r.createdBefore = &createdBefore
	return r
}

// Only return tables last updated at exactly the specified time.
func (r ApiGetCmsV3HubdbTablesRequest) UpdatedAt(updatedAt time.Time) ApiGetCmsV3HubdbTablesRequest {
	r.updatedAt = &updatedAt
	return r
}

// Only return tables last updated after the specified time.
func (r ApiGetCmsV3HubdbTablesRequest) UpdatedAfter(updatedAfter time.Time) ApiGetCmsV3HubdbTablesRequest {
	r.updatedAfter = &updatedAfter
	return r
}

// Only return tables last updated before the specified time.
func (r ApiGetCmsV3HubdbTablesRequest) UpdatedBefore(updatedBefore time.Time) ApiGetCmsV3HubdbTablesRequest {
	r.updatedBefore = &updatedBefore
	return r
}

// Specifies whether to return archived tables. Defaults to &#x60;false&#x60;.
func (r ApiGetCmsV3HubdbTablesRequest) Archived(archived bool) ApiGetCmsV3HubdbTablesRequest {
	r.archived = &archived
	return r
}

func (r ApiGetCmsV3HubdbTablesRequest) Execute() (*CollectionResponseWithTotalHubDbTableV3ForwardPaging, *http.Response, error) {
	return r.ApiService.GetCmsV3HubdbTablesExecute(r)
}

/*
GetCmsV3HubdbTables Get all published tables

Returns the details for the `published` version of each table defined in an account, including column definitions.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetCmsV3HubdbTablesRequest
*/
func (a *TablesAPIService) GetCmsV3HubdbTables(ctx context.Context) ApiGetCmsV3HubdbTablesRequest {
	return ApiGetCmsV3HubdbTablesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CollectionResponseWithTotalHubDbTableV3ForwardPaging
func (a *TablesAPIService) GetCmsV3HubdbTablesExecute(r ApiGetCmsV3HubdbTablesRequest) (*CollectionResponseWithTotalHubDbTableV3ForwardPaging, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CollectionResponseWithTotalHubDbTableV3ForwardPaging
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TablesAPIService.GetCmsV3HubdbTables")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cms/v3/hubdb/tables"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	}
	if r.after != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "after", r.after, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.createdAt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createdAt", r.createdAt, "")
	}
	if r.createdAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createdAfter", r.createdAfter, "")
	}
	if r.createdBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createdBefore", r.createdBefore, "")
	}
	if r.updatedAt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updatedAt", r.updatedAt, "")
	}
	if r.updatedAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updatedAfter", r.updatedAfter, "")
	}
	if r.updatedBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updatedBefore", r.updatedBefore, "")
	}
	if r.archived != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "archived", r.archived, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps_legacy"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app-legacy"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCmsV3HubdbTablesDraftRequest struct {
	ctx           context.Context
	ApiService    *TablesAPIService
	sort          *[]string
	after         *string
	limit         *int32
	createdAt     *time.Time
	createdAfter  *time.Time
	createdBefore *time.Time
	updatedAt     *time.Time
	updatedAfter  *time.Time
	updatedBefore *time.Time
	archived      *bool
}

// Specifies which fields to use for sorting results. Valid fields are &#x60;name&#x60;, &#x60;createdAt&#x60;, &#x60;updatedAt&#x60;, &#x60;createdBy&#x60;, &#x60;updatedBy&#x60;. &#x60;createdAt&#x60; will be used by default.
func (r ApiGetCmsV3HubdbTablesDraftRequest) Sort(sort []string) ApiGetCmsV3HubdbTablesDraftRequest {
	r.sort = &sort
	return r
}

// The cursor token value to get the next set of results. You can get this from the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results.
func (r ApiGetCmsV3HubdbTablesDraftRequest) After(after string) ApiGetCmsV3HubdbTablesDraftRequest {
	r.after = &after
	return r
}

// The maximum number of results to return. Default is 1000.
func (r ApiGetCmsV3HubdbTablesDraftRequest) Limit(limit int32) ApiGetCmsV3HubdbTablesDraftRequest {
	r.limit = &limit
	return r
}

// Only return tables created at exactly the specified time.
func (r ApiGetCmsV3HubdbTablesDraftRequest) CreatedAt(createdAt time.Time) ApiGetCmsV3HubdbTablesDraftRequest {
	r.createdAt = &createdAt
	return r
}

// Only return tables created after the specified time.
func (r ApiGetCmsV3HubdbTablesDraftRequest) CreatedAfter(createdAfter time.Time) ApiGetCmsV3HubdbTablesDraftRequest {
	r.createdAfter = &createdAfter
	return r
}

// Only return tables created before the specified time.
func (r ApiGetCmsV3HubdbTablesDraftRequest) CreatedBefore(createdBefore time.Time) ApiGetCmsV3HubdbTablesDraftRequest {
	r.createdBefore = &createdBefore
	return r
}

// Only return tables last updated at exactly the specified time.
func (r ApiGetCmsV3HubdbTablesDraftRequest) UpdatedAt(updatedAt time.Time) ApiGetCmsV3HubdbTablesDraftRequest {
	r.updatedAt = &updatedAt
	return r
}

// Only return tables last updated after the specified time.
func (r ApiGetCmsV3HubdbTablesDraftRequest) UpdatedAfter(updatedAfter time.Time) ApiGetCmsV3HubdbTablesDraftRequest {
	r.updatedAfter = &updatedAfter
	return r
}

// Only return tables last updated before the specified time.
func (r ApiGetCmsV3HubdbTablesDraftRequest) UpdatedBefore(updatedBefore time.Time) ApiGetCmsV3HubdbTablesDraftRequest {
	r.updatedBefore = &updatedBefore
	return r
}

// Specifies whether to return archived tables. Defaults to &#x60;false&#x60;.
func (r ApiGetCmsV3HubdbTablesDraftRequest) Archived(archived bool) ApiGetCmsV3HubdbTablesDraftRequest {
	r.archived = &archived
	return r
}

func (r ApiGetCmsV3HubdbTablesDraftRequest) Execute() (*CollectionResponseWithTotalHubDbTableV3ForwardPaging, *http.Response, error) {
	return r.ApiService.GetCmsV3HubdbTablesDraftExecute(r)
}

/*
GetCmsV3HubdbTablesDraft Return all draft tables

Returns the details for each draft table defined in the specified account, including column definitions.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetCmsV3HubdbTablesDraftRequest
*/
func (a *TablesAPIService) GetCmsV3HubdbTablesDraft(ctx context.Context) ApiGetCmsV3HubdbTablesDraftRequest {
	return ApiGetCmsV3HubdbTablesDraftRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CollectionResponseWithTotalHubDbTableV3ForwardPaging
func (a *TablesAPIService) GetCmsV3HubdbTablesDraftExecute(r ApiGetCmsV3HubdbTablesDraftRequest) (*CollectionResponseWithTotalHubDbTableV3ForwardPaging, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CollectionResponseWithTotalHubDbTableV3ForwardPaging
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TablesAPIService.GetCmsV3HubdbTablesDraft")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cms/v3/hubdb/tables/draft"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	}
	if r.after != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "after", r.after, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.createdAt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createdAt", r.createdAt, "")
	}
	if r.createdAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createdAfter", r.createdAfter, "")
	}
	if r.createdBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createdBefore", r.createdBefore, "")
	}
	if r.updatedAt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updatedAt", r.updatedAt, "")
	}
	if r.updatedAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updatedAfter", r.updatedAfter, "")
	}
	if r.updatedBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updatedBefore", r.updatedBefore, "")
	}
	if r.archived != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "archived", r.archived, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps_legacy"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app-legacy"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCmsV3HubdbTablesTableIdOrNameRequest struct {
	ctx               context.Context
	ApiService        *TablesAPIService
	tableIdOrName     string
	includeForeignIds *bool
	archived          *bool
}

// Set this to &#x60;true&#x60; to populate foreign ID values in the result.
func (r ApiGetCmsV3HubdbTablesTableIdOrNameRequest) IncludeForeignIds(includeForeignIds bool) ApiGetCmsV3HubdbTablesTableIdOrNameRequest {
	r.includeForeignIds = &includeForeignIds
	return r
}

// Set this to &#x60;true&#x60; to return details for an archived table. Defaults to &#x60;false&#x60;.
func (r ApiGetCmsV3HubdbTablesTableIdOrNameRequest) Archived(archived bool) ApiGetCmsV3HubdbTablesTableIdOrNameRequest {
	r.archived = &archived
	return r
}

func (r ApiGetCmsV3HubdbTablesTableIdOrNameRequest) Execute() (*HubDbTableV3, *http.Response, error) {
	return r.ApiService.GetCmsV3HubdbTablesTableIdOrNameExecute(r)
}

/*
GetCmsV3HubdbTablesTableIdOrName Get details for a published table

Returns the details for the `published` version of the specified table. This will include the definitions for the columns in the table and the number of rows in the table.

**Note:** This endpoint can be accessed without any authentication if the table is set to be allowed for public access.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param tableIdOrName The ID or name of the table to return.
	@return ApiGetCmsV3HubdbTablesTableIdOrNameRequest
*/
func (a *TablesAPIService) GetCmsV3HubdbTablesTableIdOrName(ctx context.Context, tableIdOrName string) ApiGetCmsV3HubdbTablesTableIdOrNameRequest {
	return ApiGetCmsV3HubdbTablesTableIdOrNameRequest{
		ApiService:    a,
		ctx:           ctx,
		tableIdOrName: tableIdOrName,
	}
}

// Execute executes the request
//
//	@return HubDbTableV3
func (a *TablesAPIService) GetCmsV3HubdbTablesTableIdOrNameExecute(r ApiGetCmsV3HubdbTablesTableIdOrNameRequest) (*HubDbTableV3, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *HubDbTableV3
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TablesAPIService.GetCmsV3HubdbTablesTableIdOrName")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cms/v3/hubdb/tables/{tableIdOrName}"
	localVarPath = strings.Replace(localVarPath, "{"+"tableIdOrName"+"}", url.PathEscape(parameterValueToString(r.tableIdOrName, "tableIdOrName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeForeignIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeForeignIds", r.includeForeignIds, "")
	}
	if r.archived != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "archived", r.archived, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps_legacy"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app-legacy"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCmsV3HubdbTablesTableIdOrNameDraftRequest struct {
	ctx               context.Context
	ApiService        *TablesAPIService
	tableIdOrName     string
	includeForeignIds *bool
	archived          *bool
}

// Set this to &#x60;true&#x60; to populate foreign ID values in the result.
func (r ApiGetCmsV3HubdbTablesTableIdOrNameDraftRequest) IncludeForeignIds(includeForeignIds bool) ApiGetCmsV3HubdbTablesTableIdOrNameDraftRequest {
	r.includeForeignIds = &includeForeignIds
	return r
}

// Set this to &#x60;true&#x60; to return an archived table. Defaults to &#x60;false&#x60;.
func (r ApiGetCmsV3HubdbTablesTableIdOrNameDraftRequest) Archived(archived bool) ApiGetCmsV3HubdbTablesTableIdOrNameDraftRequest {
	r.archived = &archived
	return r
}

func (r ApiGetCmsV3HubdbTablesTableIdOrNameDraftRequest) Execute() (*HubDbTableV3, *http.Response, error) {
	return r.ApiService.GetCmsV3HubdbTablesTableIdOrNameDraftExecute(r)
}

/*
GetCmsV3HubdbTablesTableIdOrNameDraft Get details for a draft table

Get the details for the `draft` version of a specific HubDB table. This will include the definitions for the columns in the table and the number of rows in the table.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param tableIdOrName The ID or name of the table to return.
	@return ApiGetCmsV3HubdbTablesTableIdOrNameDraftRequest
*/
func (a *TablesAPIService) GetCmsV3HubdbTablesTableIdOrNameDraft(ctx context.Context, tableIdOrName string) ApiGetCmsV3HubdbTablesTableIdOrNameDraftRequest {
	return ApiGetCmsV3HubdbTablesTableIdOrNameDraftRequest{
		ApiService:    a,
		ctx:           ctx,
		tableIdOrName: tableIdOrName,
	}
}

// Execute executes the request
//
//	@return HubDbTableV3
func (a *TablesAPIService) GetCmsV3HubdbTablesTableIdOrNameDraftExecute(r ApiGetCmsV3HubdbTablesTableIdOrNameDraftRequest) (*HubDbTableV3, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *HubDbTableV3
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TablesAPIService.GetCmsV3HubdbTablesTableIdOrNameDraft")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cms/v3/hubdb/tables/{tableIdOrName}/draft"
	localVarPath = strings.Replace(localVarPath, "{"+"tableIdOrName"+"}", url.PathEscape(parameterValueToString(r.tableIdOrName, "tableIdOrName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeForeignIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeForeignIds", r.includeForeignIds, "")
	}
	if r.archived != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "archived", r.archived, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps_legacy"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app-legacy"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCmsV3HubdbTablesTableIdOrNameDraftExportRequest struct {
	ctx           context.Context
	ApiService    *TablesAPIService
	tableIdOrName string
	format        *string
}

// The file format to export. Possible values include &#x60;CSV&#x60;, &#x60;XLSX&#x60;, and &#x60;XLS&#x60;.
func (r ApiGetCmsV3HubdbTablesTableIdOrNameDraftExportRequest) Format(format string) ApiGetCmsV3HubdbTablesTableIdOrNameDraftExportRequest {
	r.format = &format
	return r
}

func (r ApiGetCmsV3HubdbTablesTableIdOrNameDraftExportRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.GetCmsV3HubdbTablesTableIdOrNameDraftExportExecute(r)
}

/*
GetCmsV3HubdbTablesTableIdOrNameDraftExport Export a draft table

Exports the `draft` version of a table to CSV / EXCEL format.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param tableIdOrName The ID or name of the table to export.
	@return ApiGetCmsV3HubdbTablesTableIdOrNameDraftExportRequest
*/
func (a *TablesAPIService) GetCmsV3HubdbTablesTableIdOrNameDraftExport(ctx context.Context, tableIdOrName string) ApiGetCmsV3HubdbTablesTableIdOrNameDraftExportRequest {
	return ApiGetCmsV3HubdbTablesTableIdOrNameDraftExportRequest{
		ApiService:    a,
		ctx:           ctx,
		tableIdOrName: tableIdOrName,
	}
}

// Execute executes the request
//
//	@return *os.File
func (a *TablesAPIService) GetCmsV3HubdbTablesTableIdOrNameDraftExportExecute(r ApiGetCmsV3HubdbTablesTableIdOrNameDraftExportRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TablesAPIService.GetCmsV3HubdbTablesTableIdOrNameDraftExport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cms/v3/hubdb/tables/{tableIdOrName}/draft/export"
	localVarPath = strings.Replace(localVarPath, "{"+"tableIdOrName"+"}", url.PathEscape(parameterValueToString(r.tableIdOrName, "tableIdOrName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ms-excel", "text/csv", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps_legacy"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app-legacy"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCmsV3HubdbTablesTableIdOrNameExportRequest struct {
	ctx           context.Context
	ApiService    *TablesAPIService
	tableIdOrName string
	format        *string
}

// The file format to export. Possible values include &#x60;CSV&#x60;, &#x60;XLSX&#x60;, and &#x60;XLS&#x60;.
func (r ApiGetCmsV3HubdbTablesTableIdOrNameExportRequest) Format(format string) ApiGetCmsV3HubdbTablesTableIdOrNameExportRequest {
	r.format = &format
	return r
}

func (r ApiGetCmsV3HubdbTablesTableIdOrNameExportRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.GetCmsV3HubdbTablesTableIdOrNameExportExecute(r)
}

/*
GetCmsV3HubdbTablesTableIdOrNameExport Export a published version of a table

Exports the `published` version of a table to CSV / EXCEL format.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param tableIdOrName The ID or name of the table to export.
	@return ApiGetCmsV3HubdbTablesTableIdOrNameExportRequest
*/
func (a *TablesAPIService) GetCmsV3HubdbTablesTableIdOrNameExport(ctx context.Context, tableIdOrName string) ApiGetCmsV3HubdbTablesTableIdOrNameExportRequest {
	return ApiGetCmsV3HubdbTablesTableIdOrNameExportRequest{
		ApiService:    a,
		ctx:           ctx,
		tableIdOrName: tableIdOrName,
	}
}

// Execute executes the request
//
//	@return *os.File
func (a *TablesAPIService) GetCmsV3HubdbTablesTableIdOrNameExportExecute(r ApiGetCmsV3HubdbTablesTableIdOrNameExportRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TablesAPIService.GetCmsV3HubdbTablesTableIdOrNameExport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cms/v3/hubdb/tables/{tableIdOrName}/export"
	localVarPath = strings.Replace(localVarPath, "{"+"tableIdOrName"+"}", url.PathEscape(parameterValueToString(r.tableIdOrName, "tableIdOrName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.ms-excel", "text/csv", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps_legacy"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app-legacy"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCmsV3HubdbTablesTableIdOrNameDraftRequest struct {
	ctx                 context.Context
	ApiService          *TablesAPIService
	tableIdOrName       string
	hubDbTableV3Request *HubDbTableV3Request
	includeForeignIds   *bool
	archived            *bool
}

// The JSON schema for the table being updated.
func (r ApiPatchCmsV3HubdbTablesTableIdOrNameDraftRequest) HubDbTableV3Request(hubDbTableV3Request HubDbTableV3Request) ApiPatchCmsV3HubdbTablesTableIdOrNameDraftRequest {
	r.hubDbTableV3Request = &hubDbTableV3Request
	return r
}

// Set this to &#x60;true&#x60; to populate foreign ID values in the result.
func (r ApiPatchCmsV3HubdbTablesTableIdOrNameDraftRequest) IncludeForeignIds(includeForeignIds bool) ApiPatchCmsV3HubdbTablesTableIdOrNameDraftRequest {
	r.includeForeignIds = &includeForeignIds
	return r
}

// Specifies whether to return archived tables. Defaults to &#x60;false&#x60;.
func (r ApiPatchCmsV3HubdbTablesTableIdOrNameDraftRequest) Archived(archived bool) ApiPatchCmsV3HubdbTablesTableIdOrNameDraftRequest {
	r.archived = &archived
	return r
}

func (r ApiPatchCmsV3HubdbTablesTableIdOrNameDraftRequest) Execute() (*HubDbTableV3, *http.Response, error) {
	return r.ApiService.PatchCmsV3HubdbTablesTableIdOrNameDraftExecute(r)
}

/*
PatchCmsV3HubdbTablesTableIdOrNameDraft Update an existing table

Update an existing HubDB table. You can use this endpoint to add or remove columns to the table as well as restore an archived table. Tables updated using the endpoint will only modify the `draft` verion of the table. Use `publish` endpoint to push all the changes to the `published` version. To restore a table, include the query parameter `archived=true` and `"archived": false` in the json body.
**Note:** You need to include all the columns in the input when you are adding/removing/updating a column. If you do not include an already existing column in the request, it will be deleted.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param tableIdOrName The ID or name of the table to update.
	@return ApiPatchCmsV3HubdbTablesTableIdOrNameDraftRequest
*/
func (a *TablesAPIService) PatchCmsV3HubdbTablesTableIdOrNameDraft(ctx context.Context, tableIdOrName string) ApiPatchCmsV3HubdbTablesTableIdOrNameDraftRequest {
	return ApiPatchCmsV3HubdbTablesTableIdOrNameDraftRequest{
		ApiService:    a,
		ctx:           ctx,
		tableIdOrName: tableIdOrName,
	}
}

// Execute executes the request
//
//	@return HubDbTableV3
func (a *TablesAPIService) PatchCmsV3HubdbTablesTableIdOrNameDraftExecute(r ApiPatchCmsV3HubdbTablesTableIdOrNameDraftRequest) (*HubDbTableV3, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *HubDbTableV3
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TablesAPIService.PatchCmsV3HubdbTablesTableIdOrNameDraft")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cms/v3/hubdb/tables/{tableIdOrName}/draft"
	localVarPath = strings.Replace(localVarPath, "{"+"tableIdOrName"+"}", url.PathEscape(parameterValueToString(r.tableIdOrName, "tableIdOrName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.hubDbTableV3Request == nil {
		return localVarReturnValue, nil, reportError("hubDbTableV3Request is required and must be specified")
	}

	if r.includeForeignIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeForeignIds", r.includeForeignIds, "")
	}
	if r.archived != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "archived", r.archived, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.hubDbTableV3Request
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps_legacy"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app-legacy"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCmsV3HubdbTablesRequest struct {
	ctx                 context.Context
	ApiService          *TablesAPIService
	hubDbTableV3Request *HubDbTableV3Request
}

// The JSON schema for the table being created.
func (r ApiPostCmsV3HubdbTablesRequest) HubDbTableV3Request(hubDbTableV3Request HubDbTableV3Request) ApiPostCmsV3HubdbTablesRequest {
	r.hubDbTableV3Request = &hubDbTableV3Request
	return r
}

func (r ApiPostCmsV3HubdbTablesRequest) Execute() (*HubDbTableV3, *http.Response, error) {
	return r.ApiService.PostCmsV3HubdbTablesExecute(r)
}

/*
PostCmsV3HubdbTables Create a new table

Creates a new draft HubDB table given a JSON schema. The table name and label should be unique for each account.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostCmsV3HubdbTablesRequest
*/
func (a *TablesAPIService) PostCmsV3HubdbTables(ctx context.Context) ApiPostCmsV3HubdbTablesRequest {
	return ApiPostCmsV3HubdbTablesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return HubDbTableV3
func (a *TablesAPIService) PostCmsV3HubdbTablesExecute(r ApiPostCmsV3HubdbTablesRequest) (*HubDbTableV3, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *HubDbTableV3
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TablesAPIService.PostCmsV3HubdbTables")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cms/v3/hubdb/tables"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.hubDbTableV3Request == nil {
		return localVarReturnValue, nil, reportError("hubDbTableV3Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.hubDbTableV3Request
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps_legacy"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app-legacy"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCmsV3HubdbTablesTableIdOrNameDraftCloneRequest struct {
	ctx                    context.Context
	ApiService             *TablesAPIService
	tableIdOrName          string
	hubDbTableCloneRequest *HubDbTableCloneRequest
}

// JSON object with the properties newName and newLabel. You can set copyRows to false to clone the table with copying rows and default is true.
func (r ApiPostCmsV3HubdbTablesTableIdOrNameDraftCloneRequest) HubDbTableCloneRequest(hubDbTableCloneRequest HubDbTableCloneRequest) ApiPostCmsV3HubdbTablesTableIdOrNameDraftCloneRequest {
	r.hubDbTableCloneRequest = &hubDbTableCloneRequest
	return r
}

func (r ApiPostCmsV3HubdbTablesTableIdOrNameDraftCloneRequest) Execute() (*HubDbTableV3, *http.Response, error) {
	return r.ApiService.PostCmsV3HubdbTablesTableIdOrNameDraftCloneExecute(r)
}

/*
PostCmsV3HubdbTablesTableIdOrNameDraftClone Clone a table

Clone an existing HubDB table. The `newName` and `newLabel` of the new table can be sent as JSON in the `body` parameter. This will create the cloned table as a `draft`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param tableIdOrName The ID or name of the table to clone.
	@return ApiPostCmsV3HubdbTablesTableIdOrNameDraftCloneRequest
*/
func (a *TablesAPIService) PostCmsV3HubdbTablesTableIdOrNameDraftClone(ctx context.Context, tableIdOrName string) ApiPostCmsV3HubdbTablesTableIdOrNameDraftCloneRequest {
	return ApiPostCmsV3HubdbTablesTableIdOrNameDraftCloneRequest{
		ApiService:    a,
		ctx:           ctx,
		tableIdOrName: tableIdOrName,
	}
}

// Execute executes the request
//
//	@return HubDbTableV3
func (a *TablesAPIService) PostCmsV3HubdbTablesTableIdOrNameDraftCloneExecute(r ApiPostCmsV3HubdbTablesTableIdOrNameDraftCloneRequest) (*HubDbTableV3, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *HubDbTableV3
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TablesAPIService.PostCmsV3HubdbTablesTableIdOrNameDraftClone")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cms/v3/hubdb/tables/{tableIdOrName}/draft/clone"
	localVarPath = strings.Replace(localVarPath, "{"+"tableIdOrName"+"}", url.PathEscape(parameterValueToString(r.tableIdOrName, "tableIdOrName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.hubDbTableCloneRequest == nil {
		return localVarReturnValue, nil, reportError("hubDbTableCloneRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.hubDbTableCloneRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps_legacy"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app-legacy"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCmsV3HubdbTablesTableIdOrNameDraftImportRequest struct {
	ctx           context.Context
	ApiService    *TablesAPIService
	tableIdOrName string
	config        *string
	file          *os.File
}

// Configuration for the import in JSON format as described above.
func (r ApiPostCmsV3HubdbTablesTableIdOrNameDraftImportRequest) Config(config string) ApiPostCmsV3HubdbTablesTableIdOrNameDraftImportRequest {
	r.config = &config
	return r
}

// The source CSV file to be imported.
func (r ApiPostCmsV3HubdbTablesTableIdOrNameDraftImportRequest) File(file *os.File) ApiPostCmsV3HubdbTablesTableIdOrNameDraftImportRequest {
	r.file = file
	return r
}

func (r ApiPostCmsV3HubdbTablesTableIdOrNameDraftImportRequest) Execute() (*ImportResult, *http.Response, error) {
	return r.ApiService.PostCmsV3HubdbTablesTableIdOrNameDraftImportExecute(r)
}

/*
PostCmsV3HubdbTablesTableIdOrNameDraftImport Import data into draft table

Import the contents of a CSV file into an existing HubDB table. The data will always be imported into the `draft` version of the table. Use `/publish` endpoint to push these changes to `published` version.
This endpoint takes a multi-part POST request. The first part will be a set of JSON-formatted options for the import and you can specify this with the name as `config`.  The second part will be the CSV file you want to import and you can specify this with the name as `file`. Refer the [overview section](https://developers.hubspot.com/docs/api/cms/hubdb#importing-tables) to check the details and format of the JSON-formatted options for the import.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param tableIdOrName The ID of the destination table where data will be imported.
	@return ApiPostCmsV3HubdbTablesTableIdOrNameDraftImportRequest
*/
func (a *TablesAPIService) PostCmsV3HubdbTablesTableIdOrNameDraftImport(ctx context.Context, tableIdOrName string) ApiPostCmsV3HubdbTablesTableIdOrNameDraftImportRequest {
	return ApiPostCmsV3HubdbTablesTableIdOrNameDraftImportRequest{
		ApiService:    a,
		ctx:           ctx,
		tableIdOrName: tableIdOrName,
	}
}

// Execute executes the request
//
//	@return ImportResult
func (a *TablesAPIService) PostCmsV3HubdbTablesTableIdOrNameDraftImportExecute(r ApiPostCmsV3HubdbTablesTableIdOrNameDraftImportRequest) (*ImportResult, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ImportResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TablesAPIService.PostCmsV3HubdbTablesTableIdOrNameDraftImport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cms/v3/hubdb/tables/{tableIdOrName}/draft/import"
	localVarPath = strings.Replace(localVarPath, "{"+"tableIdOrName"+"}", url.PathEscape(parameterValueToString(r.tableIdOrName, "tableIdOrName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.config != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "config", r.config, "")
	}
	var fileLocalVarFormFileName string
	var fileLocalVarFileName string
	var fileLocalVarFileBytes []byte

	fileLocalVarFormFileName = "file"
	fileLocalVarFile := r.file

	if fileLocalVarFile != nil {
		fbs, _ := io.ReadAll(fileLocalVarFile)

		fileLocalVarFileBytes = fbs
		fileLocalVarFileName = fileLocalVarFile.Name()
		fileLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: fileLocalVarFileBytes, fileName: fileLocalVarFileName, formFileName: fileLocalVarFormFileName})
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps_legacy"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app-legacy"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCmsV3HubdbTablesTableIdOrNameDraftPublishRequest struct {
	ctx               context.Context
	ApiService        *TablesAPIService
	tableIdOrName     string
	includeForeignIds *bool
}

// Set this to &#x60;true&#x60; to populate foreign ID values in the response.
func (r ApiPostCmsV3HubdbTablesTableIdOrNameDraftPublishRequest) IncludeForeignIds(includeForeignIds bool) ApiPostCmsV3HubdbTablesTableIdOrNameDraftPublishRequest {
	r.includeForeignIds = &includeForeignIds
	return r
}

func (r ApiPostCmsV3HubdbTablesTableIdOrNameDraftPublishRequest) Execute() (*HubDbTableV3, *http.Response, error) {
	return r.ApiService.PostCmsV3HubdbTablesTableIdOrNameDraftPublishExecute(r)
}

/*
PostCmsV3HubdbTablesTableIdOrNameDraftPublish Publish a table from draft

Publishes the table by copying the data and table schema changes from draft version to the published version, meaning any website pages using data from the table will be updated.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param tableIdOrName The ID or name of the table to publish.
	@return ApiPostCmsV3HubdbTablesTableIdOrNameDraftPublishRequest
*/
func (a *TablesAPIService) PostCmsV3HubdbTablesTableIdOrNameDraftPublish(ctx context.Context, tableIdOrName string) ApiPostCmsV3HubdbTablesTableIdOrNameDraftPublishRequest {
	return ApiPostCmsV3HubdbTablesTableIdOrNameDraftPublishRequest{
		ApiService:    a,
		ctx:           ctx,
		tableIdOrName: tableIdOrName,
	}
}

// Execute executes the request
//
//	@return HubDbTableV3
func (a *TablesAPIService) PostCmsV3HubdbTablesTableIdOrNameDraftPublishExecute(r ApiPostCmsV3HubdbTablesTableIdOrNameDraftPublishRequest) (*HubDbTableV3, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *HubDbTableV3
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TablesAPIService.PostCmsV3HubdbTablesTableIdOrNameDraftPublish")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cms/v3/hubdb/tables/{tableIdOrName}/draft/publish"
	localVarPath = strings.Replace(localVarPath, "{"+"tableIdOrName"+"}", url.PathEscape(parameterValueToString(r.tableIdOrName, "tableIdOrName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeForeignIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeForeignIds", r.includeForeignIds, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps_legacy"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app-legacy"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCmsV3HubdbTablesTableIdOrNameDraftResetRequest struct {
	ctx               context.Context
	ApiService        *TablesAPIService
	tableIdOrName     string
	includeForeignIds *bool
}

// Set this to &#x60;true&#x60; to populate foreign ID values in the response.
func (r ApiPostCmsV3HubdbTablesTableIdOrNameDraftResetRequest) IncludeForeignIds(includeForeignIds bool) ApiPostCmsV3HubdbTablesTableIdOrNameDraftResetRequest {
	r.includeForeignIds = &includeForeignIds
	return r
}

func (r ApiPostCmsV3HubdbTablesTableIdOrNameDraftResetRequest) Execute() (*HubDbTableV3, *http.Response, error) {
	return r.ApiService.PostCmsV3HubdbTablesTableIdOrNameDraftResetExecute(r)
}

/*
PostCmsV3HubdbTablesTableIdOrNameDraftReset Reset a draft table

Replaces the data in the `draft` version of the table with values from the `published` version. Any unpublished changes in the `draft` will be lost after this call is made.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param tableIdOrName The ID or name of the table to reset.
	@return ApiPostCmsV3HubdbTablesTableIdOrNameDraftResetRequest
*/
func (a *TablesAPIService) PostCmsV3HubdbTablesTableIdOrNameDraftReset(ctx context.Context, tableIdOrName string) ApiPostCmsV3HubdbTablesTableIdOrNameDraftResetRequest {
	return ApiPostCmsV3HubdbTablesTableIdOrNameDraftResetRequest{
		ApiService:    a,
		ctx:           ctx,
		tableIdOrName: tableIdOrName,
	}
}

// Execute executes the request
//
//	@return HubDbTableV3
func (a *TablesAPIService) PostCmsV3HubdbTablesTableIdOrNameDraftResetExecute(r ApiPostCmsV3HubdbTablesTableIdOrNameDraftResetRequest) (*HubDbTableV3, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *HubDbTableV3
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TablesAPIService.PostCmsV3HubdbTablesTableIdOrNameDraftReset")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cms/v3/hubdb/tables/{tableIdOrName}/draft/reset"
	localVarPath = strings.Replace(localVarPath, "{"+"tableIdOrName"+"}", url.PathEscape(parameterValueToString(r.tableIdOrName, "tableIdOrName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeForeignIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeForeignIds", r.includeForeignIds, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps_legacy"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app-legacy"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCmsV3HubdbTablesTableIdOrNameUnpublishRequest struct {
	ctx               context.Context
	ApiService        *TablesAPIService
	tableIdOrName     string
	includeForeignIds *bool
}

// Set this to &#x60;true&#x60; to populate foreign ID values in the response.
func (r ApiPostCmsV3HubdbTablesTableIdOrNameUnpublishRequest) IncludeForeignIds(includeForeignIds bool) ApiPostCmsV3HubdbTablesTableIdOrNameUnpublishRequest {
	r.includeForeignIds = &includeForeignIds
	return r
}

func (r ApiPostCmsV3HubdbTablesTableIdOrNameUnpublishRequest) Execute() (*HubDbTableV3, *http.Response, error) {
	return r.ApiService.PostCmsV3HubdbTablesTableIdOrNameUnpublishExecute(r)
}

/*
PostCmsV3HubdbTablesTableIdOrNameUnpublish Unpublish a table

Unpublishes the table, meaning any website pages using data from the table will not render any data.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param tableIdOrName The ID or name of the table to publish.
	@return ApiPostCmsV3HubdbTablesTableIdOrNameUnpublishRequest
*/
func (a *TablesAPIService) PostCmsV3HubdbTablesTableIdOrNameUnpublish(ctx context.Context, tableIdOrName string) ApiPostCmsV3HubdbTablesTableIdOrNameUnpublishRequest {
	return ApiPostCmsV3HubdbTablesTableIdOrNameUnpublishRequest{
		ApiService:    a,
		ctx:           ctx,
		tableIdOrName: tableIdOrName,
	}
}

// Execute executes the request
//
//	@return HubDbTableV3
func (a *TablesAPIService) PostCmsV3HubdbTablesTableIdOrNameUnpublishExecute(r ApiPostCmsV3HubdbTablesTableIdOrNameUnpublishRequest) (*HubDbTableV3, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *HubDbTableV3
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TablesAPIService.PostCmsV3HubdbTablesTableIdOrNameUnpublish")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cms/v3/hubdb/tables/{tableIdOrName}/unpublish"
	localVarPath = strings.Replace(localVarPath, "{"+"tableIdOrName"+"}", url.PathEscape(parameterValueToString(r.tableIdOrName, "tableIdOrName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeForeignIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeForeignIds", r.includeForeignIds, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps_legacy"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app-legacy"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
