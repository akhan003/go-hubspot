/*
CRM cards

Allows an app to extend the CRM UI by surfacing custom cards in the sidebar of record pages. These cards are defined up-front as part of app configuration, then populated by external data fetch requests when the record page is accessed by a user.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm_extensions

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CardListResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CardListResponse{}

// CardListResponse List of card definitions
type CardListResponse struct {
	// List of card definitions
	Results []CardResponse `json:"results"`
}

type _CardListResponse CardListResponse

// NewCardListResponse instantiates a new CardListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCardListResponse(results []CardResponse) *CardListResponse {
	this := CardListResponse{}
	this.Results = results
	return &this
}

// NewCardListResponseWithDefaults instantiates a new CardListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCardListResponseWithDefaults() *CardListResponse {
	this := CardListResponse{}
	return &this
}

// GetResults returns the Results field value
func (o *CardListResponse) GetResults() []CardResponse {
	if o == nil {
		var ret []CardResponse
		return ret
	}

	return o.Results
}

// GetResultsOk returns a tuple with the Results field value
// and a boolean to check if the value has been set.
func (o *CardListResponse) GetResultsOk() ([]CardResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.Results, true
}

// SetResults sets field value
func (o *CardListResponse) SetResults(v []CardResponse) {
	o.Results = v
}

func (o CardListResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CardListResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["results"] = o.Results
	return toSerialize, nil
}

func (o *CardListResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"results",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCardListResponse := _CardListResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCardListResponse)

	if err != nil {
		return err
	}

	*o = CardListResponse(varCardListResponse)

	return err
}

type NullableCardListResponse struct {
	value *CardListResponse
	isSet bool
}

func (v NullableCardListResponse) Get() *CardListResponse {
	return v.value
}

func (v *NullableCardListResponse) Set(val *CardListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCardListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCardListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCardListResponse(val *CardListResponse) *NullableCardListResponse {
	return &NullableCardListResponse{value: val, isSet: true}
}

func (v NullableCardListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCardListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
