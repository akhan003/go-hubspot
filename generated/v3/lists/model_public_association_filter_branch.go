/*
Lists

CRUD operations to manage lists and list memberships

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lists

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PublicAssociationFilterBranch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicAssociationFilterBranch{}

// PublicAssociationFilterBranch struct for PublicAssociationFilterBranch
type PublicAssociationFilterBranch struct {
	FilterBranchType     string                                                     `json:"filterBranchType"`
	FilterBranches       []PublicPropertyAssociationFilterBranchFilterBranchesInner `json:"filterBranches"`
	Filters              []PublicPropertyAssociationFilterBranchFiltersInner        `json:"filters"`
	ObjectTypeId         string                                                     `json:"objectTypeId"`
	Operator             string                                                     `json:"operator"`
	AssociationTypeId    int32                                                      `json:"associationTypeId"`
	AssociationCategory  string                                                     `json:"associationCategory"`
	FilterBranchOperator string                                                     `json:"filterBranchOperator"`
}

type _PublicAssociationFilterBranch PublicAssociationFilterBranch

// NewPublicAssociationFilterBranch instantiates a new PublicAssociationFilterBranch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicAssociationFilterBranch(filterBranchType string, filterBranches []PublicPropertyAssociationFilterBranchFilterBranchesInner, filters []PublicPropertyAssociationFilterBranchFiltersInner, objectTypeId string, operator string, associationTypeId int32, associationCategory string, filterBranchOperator string) *PublicAssociationFilterBranch {
	this := PublicAssociationFilterBranch{}
	this.FilterBranchType = filterBranchType
	this.FilterBranches = filterBranches
	this.Filters = filters
	this.ObjectTypeId = objectTypeId
	this.Operator = operator
	this.AssociationTypeId = associationTypeId
	this.AssociationCategory = associationCategory
	this.FilterBranchOperator = filterBranchOperator
	return &this
}

// NewPublicAssociationFilterBranchWithDefaults instantiates a new PublicAssociationFilterBranch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicAssociationFilterBranchWithDefaults() *PublicAssociationFilterBranch {
	this := PublicAssociationFilterBranch{}
	var filterBranchType string = "ASSOCIATION"
	this.FilterBranchType = filterBranchType
	return &this
}

// GetFilterBranchType returns the FilterBranchType field value
func (o *PublicAssociationFilterBranch) GetFilterBranchType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FilterBranchType
}

// GetFilterBranchTypeOk returns a tuple with the FilterBranchType field value
// and a boolean to check if the value has been set.
func (o *PublicAssociationFilterBranch) GetFilterBranchTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FilterBranchType, true
}

// SetFilterBranchType sets field value
func (o *PublicAssociationFilterBranch) SetFilterBranchType(v string) {
	o.FilterBranchType = v
}

// GetFilterBranches returns the FilterBranches field value
func (o *PublicAssociationFilterBranch) GetFilterBranches() []PublicPropertyAssociationFilterBranchFilterBranchesInner {
	if o == nil {
		var ret []PublicPropertyAssociationFilterBranchFilterBranchesInner
		return ret
	}

	return o.FilterBranches
}

// GetFilterBranchesOk returns a tuple with the FilterBranches field value
// and a boolean to check if the value has been set.
func (o *PublicAssociationFilterBranch) GetFilterBranchesOk() ([]PublicPropertyAssociationFilterBranchFilterBranchesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.FilterBranches, true
}

// SetFilterBranches sets field value
func (o *PublicAssociationFilterBranch) SetFilterBranches(v []PublicPropertyAssociationFilterBranchFilterBranchesInner) {
	o.FilterBranches = v
}

// GetFilters returns the Filters field value
func (o *PublicAssociationFilterBranch) GetFilters() []PublicPropertyAssociationFilterBranchFiltersInner {
	if o == nil {
		var ret []PublicPropertyAssociationFilterBranchFiltersInner
		return ret
	}

	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value
// and a boolean to check if the value has been set.
func (o *PublicAssociationFilterBranch) GetFiltersOk() ([]PublicPropertyAssociationFilterBranchFiltersInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Filters, true
}

// SetFilters sets field value
func (o *PublicAssociationFilterBranch) SetFilters(v []PublicPropertyAssociationFilterBranchFiltersInner) {
	o.Filters = v
}

// GetObjectTypeId returns the ObjectTypeId field value
func (o *PublicAssociationFilterBranch) GetObjectTypeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectTypeId
}

// GetObjectTypeIdOk returns a tuple with the ObjectTypeId field value
// and a boolean to check if the value has been set.
func (o *PublicAssociationFilterBranch) GetObjectTypeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectTypeId, true
}

// SetObjectTypeId sets field value
func (o *PublicAssociationFilterBranch) SetObjectTypeId(v string) {
	o.ObjectTypeId = v
}

// GetOperator returns the Operator field value
func (o *PublicAssociationFilterBranch) GetOperator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *PublicAssociationFilterBranch) GetOperatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *PublicAssociationFilterBranch) SetOperator(v string) {
	o.Operator = v
}

// GetAssociationTypeId returns the AssociationTypeId field value
func (o *PublicAssociationFilterBranch) GetAssociationTypeId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AssociationTypeId
}

// GetAssociationTypeIdOk returns a tuple with the AssociationTypeId field value
// and a boolean to check if the value has been set.
func (o *PublicAssociationFilterBranch) GetAssociationTypeIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssociationTypeId, true
}

// SetAssociationTypeId sets field value
func (o *PublicAssociationFilterBranch) SetAssociationTypeId(v int32) {
	o.AssociationTypeId = v
}

// GetAssociationCategory returns the AssociationCategory field value
func (o *PublicAssociationFilterBranch) GetAssociationCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssociationCategory
}

// GetAssociationCategoryOk returns a tuple with the AssociationCategory field value
// and a boolean to check if the value has been set.
func (o *PublicAssociationFilterBranch) GetAssociationCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssociationCategory, true
}

// SetAssociationCategory sets field value
func (o *PublicAssociationFilterBranch) SetAssociationCategory(v string) {
	o.AssociationCategory = v
}

// GetFilterBranchOperator returns the FilterBranchOperator field value
func (o *PublicAssociationFilterBranch) GetFilterBranchOperator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FilterBranchOperator
}

// GetFilterBranchOperatorOk returns a tuple with the FilterBranchOperator field value
// and a boolean to check if the value has been set.
func (o *PublicAssociationFilterBranch) GetFilterBranchOperatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FilterBranchOperator, true
}

// SetFilterBranchOperator sets field value
func (o *PublicAssociationFilterBranch) SetFilterBranchOperator(v string) {
	o.FilterBranchOperator = v
}

func (o PublicAssociationFilterBranch) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicAssociationFilterBranch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["filterBranchType"] = o.FilterBranchType
	toSerialize["filterBranches"] = o.FilterBranches
	toSerialize["filters"] = o.Filters
	toSerialize["objectTypeId"] = o.ObjectTypeId
	toSerialize["operator"] = o.Operator
	toSerialize["associationTypeId"] = o.AssociationTypeId
	toSerialize["associationCategory"] = o.AssociationCategory
	toSerialize["filterBranchOperator"] = o.FilterBranchOperator
	return toSerialize, nil
}

func (o *PublicAssociationFilterBranch) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"filterBranchType",
		"filterBranches",
		"filters",
		"objectTypeId",
		"operator",
		"associationTypeId",
		"associationCategory",
		"filterBranchOperator",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicAssociationFilterBranch := _PublicAssociationFilterBranch{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicAssociationFilterBranch)

	if err != nil {
		return err
	}

	*o = PublicAssociationFilterBranch(varPublicAssociationFilterBranch)

	return err
}

type NullablePublicAssociationFilterBranch struct {
	value *PublicAssociationFilterBranch
	isSet bool
}

func (v NullablePublicAssociationFilterBranch) Get() *PublicAssociationFilterBranch {
	return v.value
}

func (v *NullablePublicAssociationFilterBranch) Set(val *PublicAssociationFilterBranch) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicAssociationFilterBranch) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicAssociationFilterBranch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicAssociationFilterBranch(val *PublicAssociationFilterBranch) *NullablePublicAssociationFilterBranch {
	return &NullablePublicAssociationFilterBranch{value: val, isSet: true}
}

func (v NullablePublicAssociationFilterBranch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicAssociationFilterBranch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
