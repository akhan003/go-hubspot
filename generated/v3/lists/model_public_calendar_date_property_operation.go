/*
Lists

CRUD operations to manage lists and list memberships

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lists

import (
	"encoding/json"
	"fmt"
)

// checks if the PublicCalendarDatePropertyOperation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicCalendarDatePropertyOperation{}

// PublicCalendarDatePropertyOperation struct for PublicCalendarDatePropertyOperation
type PublicCalendarDatePropertyOperation struct {
	OperationType                string  `json:"operationType"`
	Operator                     string  `json:"operator"`
	IncludeObjectsWithNoValueSet bool    `json:"includeObjectsWithNoValueSet"`
	TimeUnit                     string  `json:"timeUnit"`
	FiscalYearStart              *string `json:"fiscalYearStart,omitempty"`
	UseFiscalYear                *bool   `json:"useFiscalYear,omitempty"`
	TimeUnitCount                *int32  `json:"timeUnitCount,omitempty"`
	AdditionalProperties         map[string]interface{}
}

type _PublicCalendarDatePropertyOperation PublicCalendarDatePropertyOperation

// NewPublicCalendarDatePropertyOperation instantiates a new PublicCalendarDatePropertyOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicCalendarDatePropertyOperation(operationType string, operator string, includeObjectsWithNoValueSet bool, timeUnit string) *PublicCalendarDatePropertyOperation {
	this := PublicCalendarDatePropertyOperation{}
	this.OperationType = operationType
	this.Operator = operator
	this.IncludeObjectsWithNoValueSet = includeObjectsWithNoValueSet
	this.TimeUnit = timeUnit
	return &this
}

// NewPublicCalendarDatePropertyOperationWithDefaults instantiates a new PublicCalendarDatePropertyOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicCalendarDatePropertyOperationWithDefaults() *PublicCalendarDatePropertyOperation {
	this := PublicCalendarDatePropertyOperation{}
	var operationType string = "CALENDAR_DATE"
	this.OperationType = operationType
	return &this
}

// GetOperationType returns the OperationType field value
func (o *PublicCalendarDatePropertyOperation) GetOperationType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OperationType
}

// GetOperationTypeOk returns a tuple with the OperationType field value
// and a boolean to check if the value has been set.
func (o *PublicCalendarDatePropertyOperation) GetOperationTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OperationType, true
}

// SetOperationType sets field value
func (o *PublicCalendarDatePropertyOperation) SetOperationType(v string) {
	o.OperationType = v
}

// GetOperator returns the Operator field value
func (o *PublicCalendarDatePropertyOperation) GetOperator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *PublicCalendarDatePropertyOperation) GetOperatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *PublicCalendarDatePropertyOperation) SetOperator(v string) {
	o.Operator = v
}

// GetIncludeObjectsWithNoValueSet returns the IncludeObjectsWithNoValueSet field value
func (o *PublicCalendarDatePropertyOperation) GetIncludeObjectsWithNoValueSet() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IncludeObjectsWithNoValueSet
}

// GetIncludeObjectsWithNoValueSetOk returns a tuple with the IncludeObjectsWithNoValueSet field value
// and a boolean to check if the value has been set.
func (o *PublicCalendarDatePropertyOperation) GetIncludeObjectsWithNoValueSetOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IncludeObjectsWithNoValueSet, true
}

// SetIncludeObjectsWithNoValueSet sets field value
func (o *PublicCalendarDatePropertyOperation) SetIncludeObjectsWithNoValueSet(v bool) {
	o.IncludeObjectsWithNoValueSet = v
}

// GetTimeUnit returns the TimeUnit field value
func (o *PublicCalendarDatePropertyOperation) GetTimeUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimeUnit
}

// GetTimeUnitOk returns a tuple with the TimeUnit field value
// and a boolean to check if the value has been set.
func (o *PublicCalendarDatePropertyOperation) GetTimeUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeUnit, true
}

// SetTimeUnit sets field value
func (o *PublicCalendarDatePropertyOperation) SetTimeUnit(v string) {
	o.TimeUnit = v
}

// GetFiscalYearStart returns the FiscalYearStart field value if set, zero value otherwise.
func (o *PublicCalendarDatePropertyOperation) GetFiscalYearStart() string {
	if o == nil || IsNil(o.FiscalYearStart) {
		var ret string
		return ret
	}
	return *o.FiscalYearStart
}

// GetFiscalYearStartOk returns a tuple with the FiscalYearStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicCalendarDatePropertyOperation) GetFiscalYearStartOk() (*string, bool) {
	if o == nil || IsNil(o.FiscalYearStart) {
		return nil, false
	}
	return o.FiscalYearStart, true
}

// HasFiscalYearStart returns a boolean if a field has been set.
func (o *PublicCalendarDatePropertyOperation) HasFiscalYearStart() bool {
	if o != nil && !IsNil(o.FiscalYearStart) {
		return true
	}

	return false
}

// SetFiscalYearStart gets a reference to the given string and assigns it to the FiscalYearStart field.
func (o *PublicCalendarDatePropertyOperation) SetFiscalYearStart(v string) {
	o.FiscalYearStart = &v
}

// GetUseFiscalYear returns the UseFiscalYear field value if set, zero value otherwise.
func (o *PublicCalendarDatePropertyOperation) GetUseFiscalYear() bool {
	if o == nil || IsNil(o.UseFiscalYear) {
		var ret bool
		return ret
	}
	return *o.UseFiscalYear
}

// GetUseFiscalYearOk returns a tuple with the UseFiscalYear field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicCalendarDatePropertyOperation) GetUseFiscalYearOk() (*bool, bool) {
	if o == nil || IsNil(o.UseFiscalYear) {
		return nil, false
	}
	return o.UseFiscalYear, true
}

// HasUseFiscalYear returns a boolean if a field has been set.
func (o *PublicCalendarDatePropertyOperation) HasUseFiscalYear() bool {
	if o != nil && !IsNil(o.UseFiscalYear) {
		return true
	}

	return false
}

// SetUseFiscalYear gets a reference to the given bool and assigns it to the UseFiscalYear field.
func (o *PublicCalendarDatePropertyOperation) SetUseFiscalYear(v bool) {
	o.UseFiscalYear = &v
}

// GetTimeUnitCount returns the TimeUnitCount field value if set, zero value otherwise.
func (o *PublicCalendarDatePropertyOperation) GetTimeUnitCount() int32 {
	if o == nil || IsNil(o.TimeUnitCount) {
		var ret int32
		return ret
	}
	return *o.TimeUnitCount
}

// GetTimeUnitCountOk returns a tuple with the TimeUnitCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicCalendarDatePropertyOperation) GetTimeUnitCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TimeUnitCount) {
		return nil, false
	}
	return o.TimeUnitCount, true
}

// HasTimeUnitCount returns a boolean if a field has been set.
func (o *PublicCalendarDatePropertyOperation) HasTimeUnitCount() bool {
	if o != nil && !IsNil(o.TimeUnitCount) {
		return true
	}

	return false
}

// SetTimeUnitCount gets a reference to the given int32 and assigns it to the TimeUnitCount field.
func (o *PublicCalendarDatePropertyOperation) SetTimeUnitCount(v int32) {
	o.TimeUnitCount = &v
}

func (o PublicCalendarDatePropertyOperation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicCalendarDatePropertyOperation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["operationType"] = o.OperationType
	toSerialize["operator"] = o.Operator
	toSerialize["includeObjectsWithNoValueSet"] = o.IncludeObjectsWithNoValueSet
	toSerialize["timeUnit"] = o.TimeUnit
	if !IsNil(o.FiscalYearStart) {
		toSerialize["fiscalYearStart"] = o.FiscalYearStart
	}
	if !IsNil(o.UseFiscalYear) {
		toSerialize["useFiscalYear"] = o.UseFiscalYear
	}
	if !IsNil(o.TimeUnitCount) {
		toSerialize["timeUnitCount"] = o.TimeUnitCount
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PublicCalendarDatePropertyOperation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"operationType",
		"operator",
		"includeObjectsWithNoValueSet",
		"timeUnit",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicCalendarDatePropertyOperation := _PublicCalendarDatePropertyOperation{}

	err = json.Unmarshal(data, &varPublicCalendarDatePropertyOperation)

	if err != nil {
		return err
	}

	*o = PublicCalendarDatePropertyOperation(varPublicCalendarDatePropertyOperation)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "operationType")
		delete(additionalProperties, "operator")
		delete(additionalProperties, "includeObjectsWithNoValueSet")
		delete(additionalProperties, "timeUnit")
		delete(additionalProperties, "fiscalYearStart")
		delete(additionalProperties, "useFiscalYear")
		delete(additionalProperties, "timeUnitCount")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePublicCalendarDatePropertyOperation struct {
	value *PublicCalendarDatePropertyOperation
	isSet bool
}

func (v NullablePublicCalendarDatePropertyOperation) Get() *PublicCalendarDatePropertyOperation {
	return v.value
}

func (v *NullablePublicCalendarDatePropertyOperation) Set(val *PublicCalendarDatePropertyOperation) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicCalendarDatePropertyOperation) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicCalendarDatePropertyOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicCalendarDatePropertyOperation(val *PublicCalendarDatePropertyOperation) *NullablePublicCalendarDatePropertyOperation {
	return &NullablePublicCalendarDatePropertyOperation{value: val, isSet: true}
}

func (v NullablePublicCalendarDatePropertyOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicCalendarDatePropertyOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
