/*
Lists

CRUD operations to manage lists and list memberships

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lists

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PublicCommunicationSubscriptionFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicCommunicationSubscriptionFilter{}

// PublicCommunicationSubscriptionFilter struct for PublicCommunicationSubscriptionFilter
type PublicCommunicationSubscriptionFilter struct {
	FilterType        string   `json:"filterType"`
	SubscriptionIds   []int64  `json:"subscriptionIds"`
	Channel           string   `json:"channel"`
	AcceptedOptStates []string `json:"acceptedOptStates"`
	BusinessUnitId    *int64   `json:"businessUnitId,omitempty"`
	SubscriptionType  string   `json:"subscriptionType"`
}

type _PublicCommunicationSubscriptionFilter PublicCommunicationSubscriptionFilter

// NewPublicCommunicationSubscriptionFilter instantiates a new PublicCommunicationSubscriptionFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicCommunicationSubscriptionFilter(filterType string, subscriptionIds []int64, channel string, acceptedOptStates []string, subscriptionType string) *PublicCommunicationSubscriptionFilter {
	this := PublicCommunicationSubscriptionFilter{}
	this.FilterType = filterType
	this.SubscriptionIds = subscriptionIds
	this.Channel = channel
	this.AcceptedOptStates = acceptedOptStates
	this.SubscriptionType = subscriptionType
	return &this
}

// NewPublicCommunicationSubscriptionFilterWithDefaults instantiates a new PublicCommunicationSubscriptionFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicCommunicationSubscriptionFilterWithDefaults() *PublicCommunicationSubscriptionFilter {
	this := PublicCommunicationSubscriptionFilter{}
	var filterType string = "COMMUNICATION_SUBSCRIPTION"
	this.FilterType = filterType
	return &this
}

// GetFilterType returns the FilterType field value
func (o *PublicCommunicationSubscriptionFilter) GetFilterType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FilterType
}

// GetFilterTypeOk returns a tuple with the FilterType field value
// and a boolean to check if the value has been set.
func (o *PublicCommunicationSubscriptionFilter) GetFilterTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FilterType, true
}

// SetFilterType sets field value
func (o *PublicCommunicationSubscriptionFilter) SetFilterType(v string) {
	o.FilterType = v
}

// GetSubscriptionIds returns the SubscriptionIds field value
func (o *PublicCommunicationSubscriptionFilter) GetSubscriptionIds() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}

	return o.SubscriptionIds
}

// GetSubscriptionIdsOk returns a tuple with the SubscriptionIds field value
// and a boolean to check if the value has been set.
func (o *PublicCommunicationSubscriptionFilter) GetSubscriptionIdsOk() ([]int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubscriptionIds, true
}

// SetSubscriptionIds sets field value
func (o *PublicCommunicationSubscriptionFilter) SetSubscriptionIds(v []int64) {
	o.SubscriptionIds = v
}

// GetChannel returns the Channel field value
func (o *PublicCommunicationSubscriptionFilter) GetChannel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Channel
}

// GetChannelOk returns a tuple with the Channel field value
// and a boolean to check if the value has been set.
func (o *PublicCommunicationSubscriptionFilter) GetChannelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Channel, true
}

// SetChannel sets field value
func (o *PublicCommunicationSubscriptionFilter) SetChannel(v string) {
	o.Channel = v
}

// GetAcceptedOptStates returns the AcceptedOptStates field value
func (o *PublicCommunicationSubscriptionFilter) GetAcceptedOptStates() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AcceptedOptStates
}

// GetAcceptedOptStatesOk returns a tuple with the AcceptedOptStates field value
// and a boolean to check if the value has been set.
func (o *PublicCommunicationSubscriptionFilter) GetAcceptedOptStatesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AcceptedOptStates, true
}

// SetAcceptedOptStates sets field value
func (o *PublicCommunicationSubscriptionFilter) SetAcceptedOptStates(v []string) {
	o.AcceptedOptStates = v
}

// GetBusinessUnitId returns the BusinessUnitId field value if set, zero value otherwise.
func (o *PublicCommunicationSubscriptionFilter) GetBusinessUnitId() int64 {
	if o == nil || IsNil(o.BusinessUnitId) {
		var ret int64
		return ret
	}
	return *o.BusinessUnitId
}

// GetBusinessUnitIdOk returns a tuple with the BusinessUnitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicCommunicationSubscriptionFilter) GetBusinessUnitIdOk() (*int64, bool) {
	if o == nil || IsNil(o.BusinessUnitId) {
		return nil, false
	}
	return o.BusinessUnitId, true
}

// HasBusinessUnitId returns a boolean if a field has been set.
func (o *PublicCommunicationSubscriptionFilter) HasBusinessUnitId() bool {
	if o != nil && !IsNil(o.BusinessUnitId) {
		return true
	}

	return false
}

// SetBusinessUnitId gets a reference to the given int64 and assigns it to the BusinessUnitId field.
func (o *PublicCommunicationSubscriptionFilter) SetBusinessUnitId(v int64) {
	o.BusinessUnitId = &v
}

// GetSubscriptionType returns the SubscriptionType field value
func (o *PublicCommunicationSubscriptionFilter) GetSubscriptionType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubscriptionType
}

// GetSubscriptionTypeOk returns a tuple with the SubscriptionType field value
// and a boolean to check if the value has been set.
func (o *PublicCommunicationSubscriptionFilter) GetSubscriptionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubscriptionType, true
}

// SetSubscriptionType sets field value
func (o *PublicCommunicationSubscriptionFilter) SetSubscriptionType(v string) {
	o.SubscriptionType = v
}

func (o PublicCommunicationSubscriptionFilter) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicCommunicationSubscriptionFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["filterType"] = o.FilterType
	toSerialize["subscriptionIds"] = o.SubscriptionIds
	toSerialize["channel"] = o.Channel
	toSerialize["acceptedOptStates"] = o.AcceptedOptStates
	if !IsNil(o.BusinessUnitId) {
		toSerialize["businessUnitId"] = o.BusinessUnitId
	}
	toSerialize["subscriptionType"] = o.SubscriptionType
	return toSerialize, nil
}

func (o *PublicCommunicationSubscriptionFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"filterType",
		"subscriptionIds",
		"channel",
		"acceptedOptStates",
		"subscriptionType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicCommunicationSubscriptionFilter := _PublicCommunicationSubscriptionFilter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicCommunicationSubscriptionFilter)

	if err != nil {
		return err
	}

	*o = PublicCommunicationSubscriptionFilter(varPublicCommunicationSubscriptionFilter)

	return err
}

type NullablePublicCommunicationSubscriptionFilter struct {
	value *PublicCommunicationSubscriptionFilter
	isSet bool
}

func (v NullablePublicCommunicationSubscriptionFilter) Get() *PublicCommunicationSubscriptionFilter {
	return v.value
}

func (v *NullablePublicCommunicationSubscriptionFilter) Set(val *PublicCommunicationSubscriptionFilter) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicCommunicationSubscriptionFilter) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicCommunicationSubscriptionFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicCommunicationSubscriptionFilter(val *PublicCommunicationSubscriptionFilter) *NullablePublicCommunicationSubscriptionFilter {
	return &NullablePublicCommunicationSubscriptionFilter{value: val, isSet: true}
}

func (v NullablePublicCommunicationSubscriptionFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicCommunicationSubscriptionFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
