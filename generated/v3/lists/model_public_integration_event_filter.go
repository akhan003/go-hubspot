/*
Lists

CRUD operations to manage lists and list memberships

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lists

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PublicIntegrationEventFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicIntegrationEventFilter{}

// PublicIntegrationEventFilter struct for PublicIntegrationEventFilter
type PublicIntegrationEventFilter struct {
	FilterType  string                      `json:"filterType"`
	EventTypeId int32                       `json:"eventTypeId"`
	FilterLines []PublicEventFilterMetadata `json:"filterLines"`
}

type _PublicIntegrationEventFilter PublicIntegrationEventFilter

// NewPublicIntegrationEventFilter instantiates a new PublicIntegrationEventFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicIntegrationEventFilter(filterType string, eventTypeId int32, filterLines []PublicEventFilterMetadata) *PublicIntegrationEventFilter {
	this := PublicIntegrationEventFilter{}
	this.FilterType = filterType
	this.EventTypeId = eventTypeId
	this.FilterLines = filterLines
	return &this
}

// NewPublicIntegrationEventFilterWithDefaults instantiates a new PublicIntegrationEventFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicIntegrationEventFilterWithDefaults() *PublicIntegrationEventFilter {
	this := PublicIntegrationEventFilter{}
	var filterType string = "INTEGRATION_EVENT"
	this.FilterType = filterType
	return &this
}

// GetFilterType returns the FilterType field value
func (o *PublicIntegrationEventFilter) GetFilterType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FilterType
}

// GetFilterTypeOk returns a tuple with the FilterType field value
// and a boolean to check if the value has been set.
func (o *PublicIntegrationEventFilter) GetFilterTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FilterType, true
}

// SetFilterType sets field value
func (o *PublicIntegrationEventFilter) SetFilterType(v string) {
	o.FilterType = v
}

// GetEventTypeId returns the EventTypeId field value
func (o *PublicIntegrationEventFilter) GetEventTypeId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EventTypeId
}

// GetEventTypeIdOk returns a tuple with the EventTypeId field value
// and a boolean to check if the value has been set.
func (o *PublicIntegrationEventFilter) GetEventTypeIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventTypeId, true
}

// SetEventTypeId sets field value
func (o *PublicIntegrationEventFilter) SetEventTypeId(v int32) {
	o.EventTypeId = v
}

// GetFilterLines returns the FilterLines field value
func (o *PublicIntegrationEventFilter) GetFilterLines() []PublicEventFilterMetadata {
	if o == nil {
		var ret []PublicEventFilterMetadata
		return ret
	}

	return o.FilterLines
}

// GetFilterLinesOk returns a tuple with the FilterLines field value
// and a boolean to check if the value has been set.
func (o *PublicIntegrationEventFilter) GetFilterLinesOk() ([]PublicEventFilterMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return o.FilterLines, true
}

// SetFilterLines sets field value
func (o *PublicIntegrationEventFilter) SetFilterLines(v []PublicEventFilterMetadata) {
	o.FilterLines = v
}

func (o PublicIntegrationEventFilter) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicIntegrationEventFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["filterType"] = o.FilterType
	toSerialize["eventTypeId"] = o.EventTypeId
	toSerialize["filterLines"] = o.FilterLines
	return toSerialize, nil
}

func (o *PublicIntegrationEventFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"filterType",
		"eventTypeId",
		"filterLines",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicIntegrationEventFilter := _PublicIntegrationEventFilter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicIntegrationEventFilter)

	if err != nil {
		return err
	}

	*o = PublicIntegrationEventFilter(varPublicIntegrationEventFilter)

	return err
}

type NullablePublicIntegrationEventFilter struct {
	value *PublicIntegrationEventFilter
	isSet bool
}

func (v NullablePublicIntegrationEventFilter) Get() *PublicIntegrationEventFilter {
	return v.value
}

func (v *NullablePublicIntegrationEventFilter) Set(val *PublicIntegrationEventFilter) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicIntegrationEventFilter) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicIntegrationEventFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicIntegrationEventFilter(val *PublicIntegrationEventFilter) *NullablePublicIntegrationEventFilter {
	return &NullablePublicIntegrationEventFilter{value: val, isSet: true}
}

func (v NullablePublicIntegrationEventFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicIntegrationEventFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
