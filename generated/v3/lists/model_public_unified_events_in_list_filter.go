/*
Lists

CRUD operations to manage lists and list memberships

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lists

import (
	"encoding/json"
	"fmt"
)

// checks if the PublicUnifiedEventsInListFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicUnifiedEventsInListFilter{}

// PublicUnifiedEventsInListFilter struct for PublicUnifiedEventsInListFilter
type PublicUnifiedEventsInListFilter struct {
	FilterType           string                                        `json:"filterType"`
	PruningRefineBy      *PublicEventAnalyticsFilterCoalescingRefineBy `json:"pruningRefineBy,omitempty"`
	CoalescingRefineBy   *PublicEventAnalyticsFilterCoalescingRefineBy `json:"coalescingRefineBy,omitempty"`
	ListId               int32                                         `json:"listId"`
	EventTypeId          string                                        `json:"eventTypeId"`
	AdditionalProperties map[string]interface{}
}

type _PublicUnifiedEventsInListFilter PublicUnifiedEventsInListFilter

// NewPublicUnifiedEventsInListFilter instantiates a new PublicUnifiedEventsInListFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicUnifiedEventsInListFilter(filterType string, listId int32, eventTypeId string) *PublicUnifiedEventsInListFilter {
	this := PublicUnifiedEventsInListFilter{}
	this.FilterType = filterType
	this.ListId = listId
	this.EventTypeId = eventTypeId
	return &this
}

// NewPublicUnifiedEventsInListFilterWithDefaults instantiates a new PublicUnifiedEventsInListFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicUnifiedEventsInListFilterWithDefaults() *PublicUnifiedEventsInListFilter {
	this := PublicUnifiedEventsInListFilter{}
	var filterType string = "UNIFIED_EVENTS_IN_LIST"
	this.FilterType = filterType
	return &this
}

// GetFilterType returns the FilterType field value
func (o *PublicUnifiedEventsInListFilter) GetFilterType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FilterType
}

// GetFilterTypeOk returns a tuple with the FilterType field value
// and a boolean to check if the value has been set.
func (o *PublicUnifiedEventsInListFilter) GetFilterTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FilterType, true
}

// SetFilterType sets field value
func (o *PublicUnifiedEventsInListFilter) SetFilterType(v string) {
	o.FilterType = v
}

// GetPruningRefineBy returns the PruningRefineBy field value if set, zero value otherwise.
func (o *PublicUnifiedEventsInListFilter) GetPruningRefineBy() PublicEventAnalyticsFilterCoalescingRefineBy {
	if o == nil || IsNil(o.PruningRefineBy) {
		var ret PublicEventAnalyticsFilterCoalescingRefineBy
		return ret
	}
	return *o.PruningRefineBy
}

// GetPruningRefineByOk returns a tuple with the PruningRefineBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicUnifiedEventsInListFilter) GetPruningRefineByOk() (*PublicEventAnalyticsFilterCoalescingRefineBy, bool) {
	if o == nil || IsNil(o.PruningRefineBy) {
		return nil, false
	}
	return o.PruningRefineBy, true
}

// HasPruningRefineBy returns a boolean if a field has been set.
func (o *PublicUnifiedEventsInListFilter) HasPruningRefineBy() bool {
	if o != nil && !IsNil(o.PruningRefineBy) {
		return true
	}

	return false
}

// SetPruningRefineBy gets a reference to the given PublicEventAnalyticsFilterCoalescingRefineBy and assigns it to the PruningRefineBy field.
func (o *PublicUnifiedEventsInListFilter) SetPruningRefineBy(v PublicEventAnalyticsFilterCoalescingRefineBy) {
	o.PruningRefineBy = &v
}

// GetCoalescingRefineBy returns the CoalescingRefineBy field value if set, zero value otherwise.
func (o *PublicUnifiedEventsInListFilter) GetCoalescingRefineBy() PublicEventAnalyticsFilterCoalescingRefineBy {
	if o == nil || IsNil(o.CoalescingRefineBy) {
		var ret PublicEventAnalyticsFilterCoalescingRefineBy
		return ret
	}
	return *o.CoalescingRefineBy
}

// GetCoalescingRefineByOk returns a tuple with the CoalescingRefineBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicUnifiedEventsInListFilter) GetCoalescingRefineByOk() (*PublicEventAnalyticsFilterCoalescingRefineBy, bool) {
	if o == nil || IsNil(o.CoalescingRefineBy) {
		return nil, false
	}
	return o.CoalescingRefineBy, true
}

// HasCoalescingRefineBy returns a boolean if a field has been set.
func (o *PublicUnifiedEventsInListFilter) HasCoalescingRefineBy() bool {
	if o != nil && !IsNil(o.CoalescingRefineBy) {
		return true
	}

	return false
}

// SetCoalescingRefineBy gets a reference to the given PublicEventAnalyticsFilterCoalescingRefineBy and assigns it to the CoalescingRefineBy field.
func (o *PublicUnifiedEventsInListFilter) SetCoalescingRefineBy(v PublicEventAnalyticsFilterCoalescingRefineBy) {
	o.CoalescingRefineBy = &v
}

// GetListId returns the ListId field value
func (o *PublicUnifiedEventsInListFilter) GetListId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ListId
}

// GetListIdOk returns a tuple with the ListId field value
// and a boolean to check if the value has been set.
func (o *PublicUnifiedEventsInListFilter) GetListIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ListId, true
}

// SetListId sets field value
func (o *PublicUnifiedEventsInListFilter) SetListId(v int32) {
	o.ListId = v
}

// GetEventTypeId returns the EventTypeId field value
func (o *PublicUnifiedEventsInListFilter) GetEventTypeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventTypeId
}

// GetEventTypeIdOk returns a tuple with the EventTypeId field value
// and a boolean to check if the value has been set.
func (o *PublicUnifiedEventsInListFilter) GetEventTypeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventTypeId, true
}

// SetEventTypeId sets field value
func (o *PublicUnifiedEventsInListFilter) SetEventTypeId(v string) {
	o.EventTypeId = v
}

func (o PublicUnifiedEventsInListFilter) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicUnifiedEventsInListFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["filterType"] = o.FilterType
	if !IsNil(o.PruningRefineBy) {
		toSerialize["pruningRefineBy"] = o.PruningRefineBy
	}
	if !IsNil(o.CoalescingRefineBy) {
		toSerialize["coalescingRefineBy"] = o.CoalescingRefineBy
	}
	toSerialize["listId"] = o.ListId
	toSerialize["eventTypeId"] = o.EventTypeId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PublicUnifiedEventsInListFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"filterType",
		"listId",
		"eventTypeId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicUnifiedEventsInListFilter := _PublicUnifiedEventsInListFilter{}

	err = json.Unmarshal(data, &varPublicUnifiedEventsInListFilter)

	if err != nil {
		return err
	}

	*o = PublicUnifiedEventsInListFilter(varPublicUnifiedEventsInListFilter)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "filterType")
		delete(additionalProperties, "pruningRefineBy")
		delete(additionalProperties, "coalescingRefineBy")
		delete(additionalProperties, "listId")
		delete(additionalProperties, "eventTypeId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePublicUnifiedEventsInListFilter struct {
	value *PublicUnifiedEventsInListFilter
	isSet bool
}

func (v NullablePublicUnifiedEventsInListFilter) Get() *PublicUnifiedEventsInListFilter {
	return v.value
}

func (v *NullablePublicUnifiedEventsInListFilter) Set(val *PublicUnifiedEventsInListFilter) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicUnifiedEventsInListFilter) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicUnifiedEventsInListFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicUnifiedEventsInListFilter(val *PublicUnifiedEventsInListFilter) *NullablePublicUnifiedEventsInListFilter {
	return &NullablePublicUnifiedEventsInListFilter{value: val, isSet: true}
}

func (v NullablePublicUnifiedEventsInListFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicUnifiedEventsInListFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
