/*
Lists

Testing ListsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package lists

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_lists_ListsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ListsAPIService Create", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ListsAPI.Create(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService DoSearch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ListsAPI.DoSearch(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService GetAll", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ListsAPI.GetAll(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService GetById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var listId int32

		resp, httpRes, err := apiClient.ListsAPI.GetById(context.Background(), listId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService GetByName", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var listName string
		var objectTypeId string

		resp, httpRes, err := apiClient.ListsAPI.GetByName(context.Background(), listName, objectTypeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService Remove", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var listId int32

		httpRes, err := apiClient.ListsAPI.Remove(context.Background(), listId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService Restore", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var listId int32

		httpRes, err := apiClient.ListsAPI.Restore(context.Background(), listId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService UpdateListFilters", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var listId int32

		resp, httpRes, err := apiClient.ListsAPI.UpdateListFilters(context.Background(), listId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService UpdateName", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var listId int32

		resp, httpRes, err := apiClient.ListsAPI.UpdateName(context.Background(), listId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
