/*
Lists

CRUD operations to manage lists and list memberships

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lists

import (
	"encoding/json"
	"fmt"
)

// PublicPropertyFilterOperation - struct for PublicPropertyFilterOperation
type PublicPropertyFilterOperation struct {
	PublicAllPropertyTypesOperation           *PublicAllPropertyTypesOperation
	PublicBoolPropertyOperation               *PublicBoolPropertyOperation
	PublicCalendarDatePropertyOperation       *PublicCalendarDatePropertyOperation
	PublicComparativeDatePropertyOperation    *PublicComparativeDatePropertyOperation
	PublicComparativePropertyUpdatedOperation *PublicComparativePropertyUpdatedOperation
	PublicDatePropertyOperation               *PublicDatePropertyOperation
	PublicDateTimePropertyOperation           *PublicDateTimePropertyOperation
	PublicEnumerationPropertyOperation        *PublicEnumerationPropertyOperation
	PublicMultiStringPropertyOperation        *PublicMultiStringPropertyOperation
	PublicNumberPropertyOperation             *PublicNumberPropertyOperation
	PublicRangedDatePropertyOperation         *PublicRangedDatePropertyOperation
	PublicRangedNumberPropertyOperation       *PublicRangedNumberPropertyOperation
	PublicRangedTimeOperation                 *PublicRangedTimeOperation
	PublicRollingDateRangePropertyOperation   *PublicRollingDateRangePropertyOperation
	PublicRollingPropertyUpdatedOperation     *PublicRollingPropertyUpdatedOperation
	PublicStringPropertyOperation             *PublicStringPropertyOperation
	PublicTimePointOperation                  *PublicTimePointOperation
}

// PublicAllPropertyTypesOperationAsPublicPropertyFilterOperation is a convenience function that returns PublicAllPropertyTypesOperation wrapped in PublicPropertyFilterOperation
func PublicAllPropertyTypesOperationAsPublicPropertyFilterOperation(v *PublicAllPropertyTypesOperation) PublicPropertyFilterOperation {
	return PublicPropertyFilterOperation{
		PublicAllPropertyTypesOperation: v,
	}
}

// PublicBoolPropertyOperationAsPublicPropertyFilterOperation is a convenience function that returns PublicBoolPropertyOperation wrapped in PublicPropertyFilterOperation
func PublicBoolPropertyOperationAsPublicPropertyFilterOperation(v *PublicBoolPropertyOperation) PublicPropertyFilterOperation {
	return PublicPropertyFilterOperation{
		PublicBoolPropertyOperation: v,
	}
}

// PublicCalendarDatePropertyOperationAsPublicPropertyFilterOperation is a convenience function that returns PublicCalendarDatePropertyOperation wrapped in PublicPropertyFilterOperation
func PublicCalendarDatePropertyOperationAsPublicPropertyFilterOperation(v *PublicCalendarDatePropertyOperation) PublicPropertyFilterOperation {
	return PublicPropertyFilterOperation{
		PublicCalendarDatePropertyOperation: v,
	}
}

// PublicComparativeDatePropertyOperationAsPublicPropertyFilterOperation is a convenience function that returns PublicComparativeDatePropertyOperation wrapped in PublicPropertyFilterOperation
func PublicComparativeDatePropertyOperationAsPublicPropertyFilterOperation(v *PublicComparativeDatePropertyOperation) PublicPropertyFilterOperation {
	return PublicPropertyFilterOperation{
		PublicComparativeDatePropertyOperation: v,
	}
}

// PublicComparativePropertyUpdatedOperationAsPublicPropertyFilterOperation is a convenience function that returns PublicComparativePropertyUpdatedOperation wrapped in PublicPropertyFilterOperation
func PublicComparativePropertyUpdatedOperationAsPublicPropertyFilterOperation(v *PublicComparativePropertyUpdatedOperation) PublicPropertyFilterOperation {
	return PublicPropertyFilterOperation{
		PublicComparativePropertyUpdatedOperation: v,
	}
}

// PublicDatePropertyOperationAsPublicPropertyFilterOperation is a convenience function that returns PublicDatePropertyOperation wrapped in PublicPropertyFilterOperation
func PublicDatePropertyOperationAsPublicPropertyFilterOperation(v *PublicDatePropertyOperation) PublicPropertyFilterOperation {
	return PublicPropertyFilterOperation{
		PublicDatePropertyOperation: v,
	}
}

// PublicDateTimePropertyOperationAsPublicPropertyFilterOperation is a convenience function that returns PublicDateTimePropertyOperation wrapped in PublicPropertyFilterOperation
func PublicDateTimePropertyOperationAsPublicPropertyFilterOperation(v *PublicDateTimePropertyOperation) PublicPropertyFilterOperation {
	return PublicPropertyFilterOperation{
		PublicDateTimePropertyOperation: v,
	}
}

// PublicEnumerationPropertyOperationAsPublicPropertyFilterOperation is a convenience function that returns PublicEnumerationPropertyOperation wrapped in PublicPropertyFilterOperation
func PublicEnumerationPropertyOperationAsPublicPropertyFilterOperation(v *PublicEnumerationPropertyOperation) PublicPropertyFilterOperation {
	return PublicPropertyFilterOperation{
		PublicEnumerationPropertyOperation: v,
	}
}

// PublicMultiStringPropertyOperationAsPublicPropertyFilterOperation is a convenience function that returns PublicMultiStringPropertyOperation wrapped in PublicPropertyFilterOperation
func PublicMultiStringPropertyOperationAsPublicPropertyFilterOperation(v *PublicMultiStringPropertyOperation) PublicPropertyFilterOperation {
	return PublicPropertyFilterOperation{
		PublicMultiStringPropertyOperation: v,
	}
}

// PublicNumberPropertyOperationAsPublicPropertyFilterOperation is a convenience function that returns PublicNumberPropertyOperation wrapped in PublicPropertyFilterOperation
func PublicNumberPropertyOperationAsPublicPropertyFilterOperation(v *PublicNumberPropertyOperation) PublicPropertyFilterOperation {
	return PublicPropertyFilterOperation{
		PublicNumberPropertyOperation: v,
	}
}

// PublicRangedDatePropertyOperationAsPublicPropertyFilterOperation is a convenience function that returns PublicRangedDatePropertyOperation wrapped in PublicPropertyFilterOperation
func PublicRangedDatePropertyOperationAsPublicPropertyFilterOperation(v *PublicRangedDatePropertyOperation) PublicPropertyFilterOperation {
	return PublicPropertyFilterOperation{
		PublicRangedDatePropertyOperation: v,
	}
}

// PublicRangedNumberPropertyOperationAsPublicPropertyFilterOperation is a convenience function that returns PublicRangedNumberPropertyOperation wrapped in PublicPropertyFilterOperation
func PublicRangedNumberPropertyOperationAsPublicPropertyFilterOperation(v *PublicRangedNumberPropertyOperation) PublicPropertyFilterOperation {
	return PublicPropertyFilterOperation{
		PublicRangedNumberPropertyOperation: v,
	}
}

// PublicRangedTimeOperationAsPublicPropertyFilterOperation is a convenience function that returns PublicRangedTimeOperation wrapped in PublicPropertyFilterOperation
func PublicRangedTimeOperationAsPublicPropertyFilterOperation(v *PublicRangedTimeOperation) PublicPropertyFilterOperation {
	return PublicPropertyFilterOperation{
		PublicRangedTimeOperation: v,
	}
}

// PublicRollingDateRangePropertyOperationAsPublicPropertyFilterOperation is a convenience function that returns PublicRollingDateRangePropertyOperation wrapped in PublicPropertyFilterOperation
func PublicRollingDateRangePropertyOperationAsPublicPropertyFilterOperation(v *PublicRollingDateRangePropertyOperation) PublicPropertyFilterOperation {
	return PublicPropertyFilterOperation{
		PublicRollingDateRangePropertyOperation: v,
	}
}

// PublicRollingPropertyUpdatedOperationAsPublicPropertyFilterOperation is a convenience function that returns PublicRollingPropertyUpdatedOperation wrapped in PublicPropertyFilterOperation
func PublicRollingPropertyUpdatedOperationAsPublicPropertyFilterOperation(v *PublicRollingPropertyUpdatedOperation) PublicPropertyFilterOperation {
	return PublicPropertyFilterOperation{
		PublicRollingPropertyUpdatedOperation: v,
	}
}

// PublicStringPropertyOperationAsPublicPropertyFilterOperation is a convenience function that returns PublicStringPropertyOperation wrapped in PublicPropertyFilterOperation
func PublicStringPropertyOperationAsPublicPropertyFilterOperation(v *PublicStringPropertyOperation) PublicPropertyFilterOperation {
	return PublicPropertyFilterOperation{
		PublicStringPropertyOperation: v,
	}
}

// PublicTimePointOperationAsPublicPropertyFilterOperation is a convenience function that returns PublicTimePointOperation wrapped in PublicPropertyFilterOperation
func PublicTimePointOperationAsPublicPropertyFilterOperation(v *PublicTimePointOperation) PublicPropertyFilterOperation {
	return PublicPropertyFilterOperation{
		PublicTimePointOperation: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *PublicPropertyFilterOperation) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into PublicAllPropertyTypesOperation
	err = json.Unmarshal(data, &dst.PublicAllPropertyTypesOperation)
	if err == nil {
		jsonPublicAllPropertyTypesOperation, _ := json.Marshal(dst.PublicAllPropertyTypesOperation)
		if string(jsonPublicAllPropertyTypesOperation) == "{}" { // empty struct
			dst.PublicAllPropertyTypesOperation = nil
		} else {
			match++
		}
	} else {
		dst.PublicAllPropertyTypesOperation = nil
	}

	// try to unmarshal data into PublicBoolPropertyOperation
	err = json.Unmarshal(data, &dst.PublicBoolPropertyOperation)
	if err == nil {
		jsonPublicBoolPropertyOperation, _ := json.Marshal(dst.PublicBoolPropertyOperation)
		if string(jsonPublicBoolPropertyOperation) == "{}" { // empty struct
			dst.PublicBoolPropertyOperation = nil
		} else {
			match++
		}
	} else {
		dst.PublicBoolPropertyOperation = nil
	}

	// try to unmarshal data into PublicCalendarDatePropertyOperation
	err = json.Unmarshal(data, &dst.PublicCalendarDatePropertyOperation)
	if err == nil {
		jsonPublicCalendarDatePropertyOperation, _ := json.Marshal(dst.PublicCalendarDatePropertyOperation)
		if string(jsonPublicCalendarDatePropertyOperation) == "{}" { // empty struct
			dst.PublicCalendarDatePropertyOperation = nil
		} else {
			match++
		}
	} else {
		dst.PublicCalendarDatePropertyOperation = nil
	}

	// try to unmarshal data into PublicComparativeDatePropertyOperation
	err = json.Unmarshal(data, &dst.PublicComparativeDatePropertyOperation)
	if err == nil {
		jsonPublicComparativeDatePropertyOperation, _ := json.Marshal(dst.PublicComparativeDatePropertyOperation)
		if string(jsonPublicComparativeDatePropertyOperation) == "{}" { // empty struct
			dst.PublicComparativeDatePropertyOperation = nil
		} else {
			match++
		}
	} else {
		dst.PublicComparativeDatePropertyOperation = nil
	}

	// try to unmarshal data into PublicComparativePropertyUpdatedOperation
	err = json.Unmarshal(data, &dst.PublicComparativePropertyUpdatedOperation)
	if err == nil {
		jsonPublicComparativePropertyUpdatedOperation, _ := json.Marshal(dst.PublicComparativePropertyUpdatedOperation)
		if string(jsonPublicComparativePropertyUpdatedOperation) == "{}" { // empty struct
			dst.PublicComparativePropertyUpdatedOperation = nil
		} else {
			match++
		}
	} else {
		dst.PublicComparativePropertyUpdatedOperation = nil
	}

	// try to unmarshal data into PublicDatePropertyOperation
	err = json.Unmarshal(data, &dst.PublicDatePropertyOperation)
	if err == nil {
		jsonPublicDatePropertyOperation, _ := json.Marshal(dst.PublicDatePropertyOperation)
		if string(jsonPublicDatePropertyOperation) == "{}" { // empty struct
			dst.PublicDatePropertyOperation = nil
		} else {
			match++
		}
	} else {
		dst.PublicDatePropertyOperation = nil
	}

	// try to unmarshal data into PublicDateTimePropertyOperation
	err = json.Unmarshal(data, &dst.PublicDateTimePropertyOperation)
	if err == nil {
		jsonPublicDateTimePropertyOperation, _ := json.Marshal(dst.PublicDateTimePropertyOperation)
		if string(jsonPublicDateTimePropertyOperation) == "{}" { // empty struct
			dst.PublicDateTimePropertyOperation = nil
		} else {
			match++
		}
	} else {
		dst.PublicDateTimePropertyOperation = nil
	}

	// try to unmarshal data into PublicEnumerationPropertyOperation
	err = json.Unmarshal(data, &dst.PublicEnumerationPropertyOperation)
	if err == nil {
		jsonPublicEnumerationPropertyOperation, _ := json.Marshal(dst.PublicEnumerationPropertyOperation)
		if string(jsonPublicEnumerationPropertyOperation) == "{}" { // empty struct
			dst.PublicEnumerationPropertyOperation = nil
		} else {
			match++
		}
	} else {
		dst.PublicEnumerationPropertyOperation = nil
	}

	// try to unmarshal data into PublicMultiStringPropertyOperation
	err = json.Unmarshal(data, &dst.PublicMultiStringPropertyOperation)
	if err == nil {
		jsonPublicMultiStringPropertyOperation, _ := json.Marshal(dst.PublicMultiStringPropertyOperation)
		if string(jsonPublicMultiStringPropertyOperation) == "{}" { // empty struct
			dst.PublicMultiStringPropertyOperation = nil
		} else {
			match++
		}
	} else {
		dst.PublicMultiStringPropertyOperation = nil
	}

	// try to unmarshal data into PublicNumberPropertyOperation
	err = json.Unmarshal(data, &dst.PublicNumberPropertyOperation)
	if err == nil {
		jsonPublicNumberPropertyOperation, _ := json.Marshal(dst.PublicNumberPropertyOperation)
		if string(jsonPublicNumberPropertyOperation) == "{}" { // empty struct
			dst.PublicNumberPropertyOperation = nil
		} else {
			match++
		}
	} else {
		dst.PublicNumberPropertyOperation = nil
	}

	// try to unmarshal data into PublicRangedDatePropertyOperation
	err = json.Unmarshal(data, &dst.PublicRangedDatePropertyOperation)
	if err == nil {
		jsonPublicRangedDatePropertyOperation, _ := json.Marshal(dst.PublicRangedDatePropertyOperation)
		if string(jsonPublicRangedDatePropertyOperation) == "{}" { // empty struct
			dst.PublicRangedDatePropertyOperation = nil
		} else {
			match++
		}
	} else {
		dst.PublicRangedDatePropertyOperation = nil
	}

	// try to unmarshal data into PublicRangedNumberPropertyOperation
	err = json.Unmarshal(data, &dst.PublicRangedNumberPropertyOperation)
	if err == nil {
		jsonPublicRangedNumberPropertyOperation, _ := json.Marshal(dst.PublicRangedNumberPropertyOperation)
		if string(jsonPublicRangedNumberPropertyOperation) == "{}" { // empty struct
			dst.PublicRangedNumberPropertyOperation = nil
		} else {
			match++
		}
	} else {
		dst.PublicRangedNumberPropertyOperation = nil
	}

	// try to unmarshal data into PublicRangedTimeOperation
	err = json.Unmarshal(data, &dst.PublicRangedTimeOperation)
	if err == nil {
		jsonPublicRangedTimeOperation, _ := json.Marshal(dst.PublicRangedTimeOperation)
		if string(jsonPublicRangedTimeOperation) == "{}" { // empty struct
			dst.PublicRangedTimeOperation = nil
		} else {
			match++
		}
	} else {
		dst.PublicRangedTimeOperation = nil
	}

	// try to unmarshal data into PublicRollingDateRangePropertyOperation
	err = json.Unmarshal(data, &dst.PublicRollingDateRangePropertyOperation)
	if err == nil {
		jsonPublicRollingDateRangePropertyOperation, _ := json.Marshal(dst.PublicRollingDateRangePropertyOperation)
		if string(jsonPublicRollingDateRangePropertyOperation) == "{}" { // empty struct
			dst.PublicRollingDateRangePropertyOperation = nil
		} else {
			match++
		}
	} else {
		dst.PublicRollingDateRangePropertyOperation = nil
	}

	// try to unmarshal data into PublicRollingPropertyUpdatedOperation
	err = json.Unmarshal(data, &dst.PublicRollingPropertyUpdatedOperation)
	if err == nil {
		jsonPublicRollingPropertyUpdatedOperation, _ := json.Marshal(dst.PublicRollingPropertyUpdatedOperation)
		if string(jsonPublicRollingPropertyUpdatedOperation) == "{}" { // empty struct
			dst.PublicRollingPropertyUpdatedOperation = nil
		} else {
			match++
		}
	} else {
		dst.PublicRollingPropertyUpdatedOperation = nil
	}

	// try to unmarshal data into PublicStringPropertyOperation
	err = json.Unmarshal(data, &dst.PublicStringPropertyOperation)
	if err == nil {
		jsonPublicStringPropertyOperation, _ := json.Marshal(dst.PublicStringPropertyOperation)
		if string(jsonPublicStringPropertyOperation) == "{}" { // empty struct
			dst.PublicStringPropertyOperation = nil
		} else {
			match++
		}
	} else {
		dst.PublicStringPropertyOperation = nil
	}

	// try to unmarshal data into PublicTimePointOperation
	err = json.Unmarshal(data, &dst.PublicTimePointOperation)
	if err == nil {
		jsonPublicTimePointOperation, _ := json.Marshal(dst.PublicTimePointOperation)
		if string(jsonPublicTimePointOperation) == "{}" { // empty struct
			dst.PublicTimePointOperation = nil
		} else {
			match++
		}
	} else {
		dst.PublicTimePointOperation = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.PublicAllPropertyTypesOperation = nil
		dst.PublicBoolPropertyOperation = nil
		dst.PublicCalendarDatePropertyOperation = nil
		dst.PublicComparativeDatePropertyOperation = nil
		dst.PublicComparativePropertyUpdatedOperation = nil
		dst.PublicDatePropertyOperation = nil
		dst.PublicDateTimePropertyOperation = nil
		dst.PublicEnumerationPropertyOperation = nil
		dst.PublicMultiStringPropertyOperation = nil
		dst.PublicNumberPropertyOperation = nil
		dst.PublicRangedDatePropertyOperation = nil
		dst.PublicRangedNumberPropertyOperation = nil
		dst.PublicRangedTimeOperation = nil
		dst.PublicRollingDateRangePropertyOperation = nil
		dst.PublicRollingPropertyUpdatedOperation = nil
		dst.PublicStringPropertyOperation = nil
		dst.PublicTimePointOperation = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PublicPropertyFilterOperation)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PublicPropertyFilterOperation)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PublicPropertyFilterOperation) MarshalJSON() ([]byte, error) {
	if src.PublicAllPropertyTypesOperation != nil {
		return json.Marshal(&src.PublicAllPropertyTypesOperation)
	}

	if src.PublicBoolPropertyOperation != nil {
		return json.Marshal(&src.PublicBoolPropertyOperation)
	}

	if src.PublicCalendarDatePropertyOperation != nil {
		return json.Marshal(&src.PublicCalendarDatePropertyOperation)
	}

	if src.PublicComparativeDatePropertyOperation != nil {
		return json.Marshal(&src.PublicComparativeDatePropertyOperation)
	}

	if src.PublicComparativePropertyUpdatedOperation != nil {
		return json.Marshal(&src.PublicComparativePropertyUpdatedOperation)
	}

	if src.PublicDatePropertyOperation != nil {
		return json.Marshal(&src.PublicDatePropertyOperation)
	}

	if src.PublicDateTimePropertyOperation != nil {
		return json.Marshal(&src.PublicDateTimePropertyOperation)
	}

	if src.PublicEnumerationPropertyOperation != nil {
		return json.Marshal(&src.PublicEnumerationPropertyOperation)
	}

	if src.PublicMultiStringPropertyOperation != nil {
		return json.Marshal(&src.PublicMultiStringPropertyOperation)
	}

	if src.PublicNumberPropertyOperation != nil {
		return json.Marshal(&src.PublicNumberPropertyOperation)
	}

	if src.PublicRangedDatePropertyOperation != nil {
		return json.Marshal(&src.PublicRangedDatePropertyOperation)
	}

	if src.PublicRangedNumberPropertyOperation != nil {
		return json.Marshal(&src.PublicRangedNumberPropertyOperation)
	}

	if src.PublicRangedTimeOperation != nil {
		return json.Marshal(&src.PublicRangedTimeOperation)
	}

	if src.PublicRollingDateRangePropertyOperation != nil {
		return json.Marshal(&src.PublicRollingDateRangePropertyOperation)
	}

	if src.PublicRollingPropertyUpdatedOperation != nil {
		return json.Marshal(&src.PublicRollingPropertyUpdatedOperation)
	}

	if src.PublicStringPropertyOperation != nil {
		return json.Marshal(&src.PublicStringPropertyOperation)
	}

	if src.PublicTimePointOperation != nil {
		return json.Marshal(&src.PublicTimePointOperation)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PublicPropertyFilterOperation) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.PublicAllPropertyTypesOperation != nil {
		return obj.PublicAllPropertyTypesOperation
	}

	if obj.PublicBoolPropertyOperation != nil {
		return obj.PublicBoolPropertyOperation
	}

	if obj.PublicCalendarDatePropertyOperation != nil {
		return obj.PublicCalendarDatePropertyOperation
	}

	if obj.PublicComparativeDatePropertyOperation != nil {
		return obj.PublicComparativeDatePropertyOperation
	}

	if obj.PublicComparativePropertyUpdatedOperation != nil {
		return obj.PublicComparativePropertyUpdatedOperation
	}

	if obj.PublicDatePropertyOperation != nil {
		return obj.PublicDatePropertyOperation
	}

	if obj.PublicDateTimePropertyOperation != nil {
		return obj.PublicDateTimePropertyOperation
	}

	if obj.PublicEnumerationPropertyOperation != nil {
		return obj.PublicEnumerationPropertyOperation
	}

	if obj.PublicMultiStringPropertyOperation != nil {
		return obj.PublicMultiStringPropertyOperation
	}

	if obj.PublicNumberPropertyOperation != nil {
		return obj.PublicNumberPropertyOperation
	}

	if obj.PublicRangedDatePropertyOperation != nil {
		return obj.PublicRangedDatePropertyOperation
	}

	if obj.PublicRangedNumberPropertyOperation != nil {
		return obj.PublicRangedNumberPropertyOperation
	}

	if obj.PublicRangedTimeOperation != nil {
		return obj.PublicRangedTimeOperation
	}

	if obj.PublicRollingDateRangePropertyOperation != nil {
		return obj.PublicRollingDateRangePropertyOperation
	}

	if obj.PublicRollingPropertyUpdatedOperation != nil {
		return obj.PublicRollingPropertyUpdatedOperation
	}

	if obj.PublicStringPropertyOperation != nil {
		return obj.PublicStringPropertyOperation
	}

	if obj.PublicTimePointOperation != nil {
		return obj.PublicTimePointOperation
	}

	// all schemas are nil
	return nil
}

type NullablePublicPropertyFilterOperation struct {
	value *PublicPropertyFilterOperation
	isSet bool
}

func (v NullablePublicPropertyFilterOperation) Get() *PublicPropertyFilterOperation {
	return v.value
}

func (v *NullablePublicPropertyFilterOperation) Set(val *PublicPropertyFilterOperation) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicPropertyFilterOperation) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicPropertyFilterOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicPropertyFilterOperation(val *PublicPropertyFilterOperation) *NullablePublicPropertyFilterOperation {
	return &NullablePublicPropertyFilterOperation{value: val, isSet: true}
}

func (v NullablePublicPropertyFilterOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicPropertyFilterOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
