/*
Lists

CRUD operations to manage lists and list memberships

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lists

import (
	"encoding/json"
	"fmt"
)

// checks if the PublicComparativePropertyUpdatedOperation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicComparativePropertyUpdatedOperation{}

// PublicComparativePropertyUpdatedOperation struct for PublicComparativePropertyUpdatedOperation
type PublicComparativePropertyUpdatedOperation struct {
	OperationType                string  `json:"operationType"`
	Operator                     string  `json:"operator"`
	IncludeObjectsWithNoValueSet bool    `json:"includeObjectsWithNoValueSet"`
	ComparisonPropertyName       string  `json:"comparisonPropertyName"`
	DefaultComparisonValue       *string `json:"defaultComparisonValue,omitempty"`
	AdditionalProperties         map[string]interface{}
}

type _PublicComparativePropertyUpdatedOperation PublicComparativePropertyUpdatedOperation

// NewPublicComparativePropertyUpdatedOperation instantiates a new PublicComparativePropertyUpdatedOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicComparativePropertyUpdatedOperation(operationType string, operator string, includeObjectsWithNoValueSet bool, comparisonPropertyName string) *PublicComparativePropertyUpdatedOperation {
	this := PublicComparativePropertyUpdatedOperation{}
	this.OperationType = operationType
	this.Operator = operator
	this.IncludeObjectsWithNoValueSet = includeObjectsWithNoValueSet
	this.ComparisonPropertyName = comparisonPropertyName
	return &this
}

// NewPublicComparativePropertyUpdatedOperationWithDefaults instantiates a new PublicComparativePropertyUpdatedOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicComparativePropertyUpdatedOperationWithDefaults() *PublicComparativePropertyUpdatedOperation {
	this := PublicComparativePropertyUpdatedOperation{}
	var operationType string = "COMPARATIVE_PROPERTY_UPDATED"
	this.OperationType = operationType
	return &this
}

// GetOperationType returns the OperationType field value
func (o *PublicComparativePropertyUpdatedOperation) GetOperationType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OperationType
}

// GetOperationTypeOk returns a tuple with the OperationType field value
// and a boolean to check if the value has been set.
func (o *PublicComparativePropertyUpdatedOperation) GetOperationTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OperationType, true
}

// SetOperationType sets field value
func (o *PublicComparativePropertyUpdatedOperation) SetOperationType(v string) {
	o.OperationType = v
}

// GetOperator returns the Operator field value
func (o *PublicComparativePropertyUpdatedOperation) GetOperator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *PublicComparativePropertyUpdatedOperation) GetOperatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *PublicComparativePropertyUpdatedOperation) SetOperator(v string) {
	o.Operator = v
}

// GetIncludeObjectsWithNoValueSet returns the IncludeObjectsWithNoValueSet field value
func (o *PublicComparativePropertyUpdatedOperation) GetIncludeObjectsWithNoValueSet() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IncludeObjectsWithNoValueSet
}

// GetIncludeObjectsWithNoValueSetOk returns a tuple with the IncludeObjectsWithNoValueSet field value
// and a boolean to check if the value has been set.
func (o *PublicComparativePropertyUpdatedOperation) GetIncludeObjectsWithNoValueSetOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IncludeObjectsWithNoValueSet, true
}

// SetIncludeObjectsWithNoValueSet sets field value
func (o *PublicComparativePropertyUpdatedOperation) SetIncludeObjectsWithNoValueSet(v bool) {
	o.IncludeObjectsWithNoValueSet = v
}

// GetComparisonPropertyName returns the ComparisonPropertyName field value
func (o *PublicComparativePropertyUpdatedOperation) GetComparisonPropertyName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ComparisonPropertyName
}

// GetComparisonPropertyNameOk returns a tuple with the ComparisonPropertyName field value
// and a boolean to check if the value has been set.
func (o *PublicComparativePropertyUpdatedOperation) GetComparisonPropertyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ComparisonPropertyName, true
}

// SetComparisonPropertyName sets field value
func (o *PublicComparativePropertyUpdatedOperation) SetComparisonPropertyName(v string) {
	o.ComparisonPropertyName = v
}

// GetDefaultComparisonValue returns the DefaultComparisonValue field value if set, zero value otherwise.
func (o *PublicComparativePropertyUpdatedOperation) GetDefaultComparisonValue() string {
	if o == nil || IsNil(o.DefaultComparisonValue) {
		var ret string
		return ret
	}
	return *o.DefaultComparisonValue
}

// GetDefaultComparisonValueOk returns a tuple with the DefaultComparisonValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicComparativePropertyUpdatedOperation) GetDefaultComparisonValueOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultComparisonValue) {
		return nil, false
	}
	return o.DefaultComparisonValue, true
}

// HasDefaultComparisonValue returns a boolean if a field has been set.
func (o *PublicComparativePropertyUpdatedOperation) HasDefaultComparisonValue() bool {
	if o != nil && !IsNil(o.DefaultComparisonValue) {
		return true
	}

	return false
}

// SetDefaultComparisonValue gets a reference to the given string and assigns it to the DefaultComparisonValue field.
func (o *PublicComparativePropertyUpdatedOperation) SetDefaultComparisonValue(v string) {
	o.DefaultComparisonValue = &v
}

func (o PublicComparativePropertyUpdatedOperation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicComparativePropertyUpdatedOperation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["operationType"] = o.OperationType
	toSerialize["operator"] = o.Operator
	toSerialize["includeObjectsWithNoValueSet"] = o.IncludeObjectsWithNoValueSet
	toSerialize["comparisonPropertyName"] = o.ComparisonPropertyName
	if !IsNil(o.DefaultComparisonValue) {
		toSerialize["defaultComparisonValue"] = o.DefaultComparisonValue
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PublicComparativePropertyUpdatedOperation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"operationType",
		"operator",
		"includeObjectsWithNoValueSet",
		"comparisonPropertyName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicComparativePropertyUpdatedOperation := _PublicComparativePropertyUpdatedOperation{}

	err = json.Unmarshal(data, &varPublicComparativePropertyUpdatedOperation)

	if err != nil {
		return err
	}

	*o = PublicComparativePropertyUpdatedOperation(varPublicComparativePropertyUpdatedOperation)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "operationType")
		delete(additionalProperties, "operator")
		delete(additionalProperties, "includeObjectsWithNoValueSet")
		delete(additionalProperties, "comparisonPropertyName")
		delete(additionalProperties, "defaultComparisonValue")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePublicComparativePropertyUpdatedOperation struct {
	value *PublicComparativePropertyUpdatedOperation
	isSet bool
}

func (v NullablePublicComparativePropertyUpdatedOperation) Get() *PublicComparativePropertyUpdatedOperation {
	return v.value
}

func (v *NullablePublicComparativePropertyUpdatedOperation) Set(val *PublicComparativePropertyUpdatedOperation) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicComparativePropertyUpdatedOperation) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicComparativePropertyUpdatedOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicComparativePropertyUpdatedOperation(val *PublicComparativePropertyUpdatedOperation) *NullablePublicComparativePropertyUpdatedOperation {
	return &NullablePublicComparativePropertyUpdatedOperation{value: val, isSet: true}
}

func (v NullablePublicComparativePropertyUpdatedOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicComparativePropertyUpdatedOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
