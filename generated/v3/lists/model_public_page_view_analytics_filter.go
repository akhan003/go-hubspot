/*
Lists

CRUD operations to manage lists and list memberships

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lists

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PublicPageViewAnalyticsFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicPageViewAnalyticsFilter{}

// PublicPageViewAnalyticsFilter struct for PublicPageViewAnalyticsFilter
type PublicPageViewAnalyticsFilter struct {
	FilterType         string                                        `json:"filterType"`
	CoalescingRefineBy *PublicEventAnalyticsFilterCoalescingRefineBy `json:"coalescingRefineBy,omitempty"`
	PruningRefineBy    *PublicEventAnalyticsFilterCoalescingRefineBy `json:"pruningRefineBy,omitempty"`
	Operator           string                                        `json:"operator"`
	EnableTracking     *bool                                         `json:"enableTracking,omitempty"`
	PageUrl            string                                        `json:"pageUrl"`
}

type _PublicPageViewAnalyticsFilter PublicPageViewAnalyticsFilter

// NewPublicPageViewAnalyticsFilter instantiates a new PublicPageViewAnalyticsFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicPageViewAnalyticsFilter(filterType string, operator string, pageUrl string) *PublicPageViewAnalyticsFilter {
	this := PublicPageViewAnalyticsFilter{}
	this.FilterType = filterType
	this.Operator = operator
	this.PageUrl = pageUrl
	return &this
}

// NewPublicPageViewAnalyticsFilterWithDefaults instantiates a new PublicPageViewAnalyticsFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicPageViewAnalyticsFilterWithDefaults() *PublicPageViewAnalyticsFilter {
	this := PublicPageViewAnalyticsFilter{}
	var filterType string = "PAGE_VIEW"
	this.FilterType = filterType
	return &this
}

// GetFilterType returns the FilterType field value
func (o *PublicPageViewAnalyticsFilter) GetFilterType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FilterType
}

// GetFilterTypeOk returns a tuple with the FilterType field value
// and a boolean to check if the value has been set.
func (o *PublicPageViewAnalyticsFilter) GetFilterTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FilterType, true
}

// SetFilterType sets field value
func (o *PublicPageViewAnalyticsFilter) SetFilterType(v string) {
	o.FilterType = v
}

// GetCoalescingRefineBy returns the CoalescingRefineBy field value if set, zero value otherwise.
func (o *PublicPageViewAnalyticsFilter) GetCoalescingRefineBy() PublicEventAnalyticsFilterCoalescingRefineBy {
	if o == nil || IsNil(o.CoalescingRefineBy) {
		var ret PublicEventAnalyticsFilterCoalescingRefineBy
		return ret
	}
	return *o.CoalescingRefineBy
}

// GetCoalescingRefineByOk returns a tuple with the CoalescingRefineBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicPageViewAnalyticsFilter) GetCoalescingRefineByOk() (*PublicEventAnalyticsFilterCoalescingRefineBy, bool) {
	if o == nil || IsNil(o.CoalescingRefineBy) {
		return nil, false
	}
	return o.CoalescingRefineBy, true
}

// HasCoalescingRefineBy returns a boolean if a field has been set.
func (o *PublicPageViewAnalyticsFilter) HasCoalescingRefineBy() bool {
	if o != nil && !IsNil(o.CoalescingRefineBy) {
		return true
	}

	return false
}

// SetCoalescingRefineBy gets a reference to the given PublicEventAnalyticsFilterCoalescingRefineBy and assigns it to the CoalescingRefineBy field.
func (o *PublicPageViewAnalyticsFilter) SetCoalescingRefineBy(v PublicEventAnalyticsFilterCoalescingRefineBy) {
	o.CoalescingRefineBy = &v
}

// GetPruningRefineBy returns the PruningRefineBy field value if set, zero value otherwise.
func (o *PublicPageViewAnalyticsFilter) GetPruningRefineBy() PublicEventAnalyticsFilterCoalescingRefineBy {
	if o == nil || IsNil(o.PruningRefineBy) {
		var ret PublicEventAnalyticsFilterCoalescingRefineBy
		return ret
	}
	return *o.PruningRefineBy
}

// GetPruningRefineByOk returns a tuple with the PruningRefineBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicPageViewAnalyticsFilter) GetPruningRefineByOk() (*PublicEventAnalyticsFilterCoalescingRefineBy, bool) {
	if o == nil || IsNil(o.PruningRefineBy) {
		return nil, false
	}
	return o.PruningRefineBy, true
}

// HasPruningRefineBy returns a boolean if a field has been set.
func (o *PublicPageViewAnalyticsFilter) HasPruningRefineBy() bool {
	if o != nil && !IsNil(o.PruningRefineBy) {
		return true
	}

	return false
}

// SetPruningRefineBy gets a reference to the given PublicEventAnalyticsFilterCoalescingRefineBy and assigns it to the PruningRefineBy field.
func (o *PublicPageViewAnalyticsFilter) SetPruningRefineBy(v PublicEventAnalyticsFilterCoalescingRefineBy) {
	o.PruningRefineBy = &v
}

// GetOperator returns the Operator field value
func (o *PublicPageViewAnalyticsFilter) GetOperator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *PublicPageViewAnalyticsFilter) GetOperatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *PublicPageViewAnalyticsFilter) SetOperator(v string) {
	o.Operator = v
}

// GetEnableTracking returns the EnableTracking field value if set, zero value otherwise.
func (o *PublicPageViewAnalyticsFilter) GetEnableTracking() bool {
	if o == nil || IsNil(o.EnableTracking) {
		var ret bool
		return ret
	}
	return *o.EnableTracking
}

// GetEnableTrackingOk returns a tuple with the EnableTracking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicPageViewAnalyticsFilter) GetEnableTrackingOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableTracking) {
		return nil, false
	}
	return o.EnableTracking, true
}

// HasEnableTracking returns a boolean if a field has been set.
func (o *PublicPageViewAnalyticsFilter) HasEnableTracking() bool {
	if o != nil && !IsNil(o.EnableTracking) {
		return true
	}

	return false
}

// SetEnableTracking gets a reference to the given bool and assigns it to the EnableTracking field.
func (o *PublicPageViewAnalyticsFilter) SetEnableTracking(v bool) {
	o.EnableTracking = &v
}

// GetPageUrl returns the PageUrl field value
func (o *PublicPageViewAnalyticsFilter) GetPageUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PageUrl
}

// GetPageUrlOk returns a tuple with the PageUrl field value
// and a boolean to check if the value has been set.
func (o *PublicPageViewAnalyticsFilter) GetPageUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PageUrl, true
}

// SetPageUrl sets field value
func (o *PublicPageViewAnalyticsFilter) SetPageUrl(v string) {
	o.PageUrl = v
}

func (o PublicPageViewAnalyticsFilter) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicPageViewAnalyticsFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["filterType"] = o.FilterType
	if !IsNil(o.CoalescingRefineBy) {
		toSerialize["coalescingRefineBy"] = o.CoalescingRefineBy
	}
	if !IsNil(o.PruningRefineBy) {
		toSerialize["pruningRefineBy"] = o.PruningRefineBy
	}
	toSerialize["operator"] = o.Operator
	if !IsNil(o.EnableTracking) {
		toSerialize["enableTracking"] = o.EnableTracking
	}
	toSerialize["pageUrl"] = o.PageUrl
	return toSerialize, nil
}

func (o *PublicPageViewAnalyticsFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"filterType",
		"operator",
		"pageUrl",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicPageViewAnalyticsFilter := _PublicPageViewAnalyticsFilter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicPageViewAnalyticsFilter)

	if err != nil {
		return err
	}

	*o = PublicPageViewAnalyticsFilter(varPublicPageViewAnalyticsFilter)

	return err
}

type NullablePublicPageViewAnalyticsFilter struct {
	value *PublicPageViewAnalyticsFilter
	isSet bool
}

func (v NullablePublicPageViewAnalyticsFilter) Get() *PublicPageViewAnalyticsFilter {
	return v.value
}

func (v *NullablePublicPageViewAnalyticsFilter) Set(val *PublicPageViewAnalyticsFilter) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicPageViewAnalyticsFilter) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicPageViewAnalyticsFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicPageViewAnalyticsFilter(val *PublicPageViewAnalyticsFilter) *NullablePublicPageViewAnalyticsFilter {
	return &NullablePublicPageViewAnalyticsFilter{value: val, isSet: true}
}

func (v NullablePublicPageViewAnalyticsFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicPageViewAnalyticsFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
