/*
Lists

CRUD operations to manage lists and list memberships

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lists

import (
	"encoding/json"
	"fmt"
)

// checks if the PublicAbsoluteComparativeTimestampRefineBy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicAbsoluteComparativeTimestampRefineBy{}

// PublicAbsoluteComparativeTimestampRefineBy struct for PublicAbsoluteComparativeTimestampRefineBy
type PublicAbsoluteComparativeTimestampRefineBy struct {
	Type                 string `json:"type"`
	Comparison           string `json:"comparison"`
	Timestamp            int64  `json:"timestamp"`
	AdditionalProperties map[string]interface{}
}

type _PublicAbsoluteComparativeTimestampRefineBy PublicAbsoluteComparativeTimestampRefineBy

// NewPublicAbsoluteComparativeTimestampRefineBy instantiates a new PublicAbsoluteComparativeTimestampRefineBy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicAbsoluteComparativeTimestampRefineBy(type_ string, comparison string, timestamp int64) *PublicAbsoluteComparativeTimestampRefineBy {
	this := PublicAbsoluteComparativeTimestampRefineBy{}
	this.Type = type_
	this.Comparison = comparison
	this.Timestamp = timestamp
	return &this
}

// NewPublicAbsoluteComparativeTimestampRefineByWithDefaults instantiates a new PublicAbsoluteComparativeTimestampRefineBy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicAbsoluteComparativeTimestampRefineByWithDefaults() *PublicAbsoluteComparativeTimestampRefineBy {
	this := PublicAbsoluteComparativeTimestampRefineBy{}
	var type_ string = "ABSOLUTE_COMPARATIVE"
	this.Type = type_
	return &this
}

// GetType returns the Type field value
func (o *PublicAbsoluteComparativeTimestampRefineBy) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PublicAbsoluteComparativeTimestampRefineBy) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PublicAbsoluteComparativeTimestampRefineBy) SetType(v string) {
	o.Type = v
}

// GetComparison returns the Comparison field value
func (o *PublicAbsoluteComparativeTimestampRefineBy) GetComparison() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Comparison
}

// GetComparisonOk returns a tuple with the Comparison field value
// and a boolean to check if the value has been set.
func (o *PublicAbsoluteComparativeTimestampRefineBy) GetComparisonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Comparison, true
}

// SetComparison sets field value
func (o *PublicAbsoluteComparativeTimestampRefineBy) SetComparison(v string) {
	o.Comparison = v
}

// GetTimestamp returns the Timestamp field value
func (o *PublicAbsoluteComparativeTimestampRefineBy) GetTimestamp() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *PublicAbsoluteComparativeTimestampRefineBy) GetTimestampOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *PublicAbsoluteComparativeTimestampRefineBy) SetTimestamp(v int64) {
	o.Timestamp = v
}

func (o PublicAbsoluteComparativeTimestampRefineBy) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicAbsoluteComparativeTimestampRefineBy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["comparison"] = o.Comparison
	toSerialize["timestamp"] = o.Timestamp

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PublicAbsoluteComparativeTimestampRefineBy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"comparison",
		"timestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicAbsoluteComparativeTimestampRefineBy := _PublicAbsoluteComparativeTimestampRefineBy{}

	err = json.Unmarshal(data, &varPublicAbsoluteComparativeTimestampRefineBy)

	if err != nil {
		return err
	}

	*o = PublicAbsoluteComparativeTimestampRefineBy(varPublicAbsoluteComparativeTimestampRefineBy)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "comparison")
		delete(additionalProperties, "timestamp")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePublicAbsoluteComparativeTimestampRefineBy struct {
	value *PublicAbsoluteComparativeTimestampRefineBy
	isSet bool
}

func (v NullablePublicAbsoluteComparativeTimestampRefineBy) Get() *PublicAbsoluteComparativeTimestampRefineBy {
	return v.value
}

func (v *NullablePublicAbsoluteComparativeTimestampRefineBy) Set(val *PublicAbsoluteComparativeTimestampRefineBy) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicAbsoluteComparativeTimestampRefineBy) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicAbsoluteComparativeTimestampRefineBy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicAbsoluteComparativeTimestampRefineBy(val *PublicAbsoluteComparativeTimestampRefineBy) *NullablePublicAbsoluteComparativeTimestampRefineBy {
	return &NullablePublicAbsoluteComparativeTimestampRefineBy{value: val, isSet: true}
}

func (v NullablePublicAbsoluteComparativeTimestampRefineBy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicAbsoluteComparativeTimestampRefineBy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
