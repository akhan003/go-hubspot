/*
CMS Authors

Testing BlogAuthorsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package authors

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_authors_BlogAuthorsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BlogAuthorsAPIService DeleteCmsV3BlogsAuthorsObjectId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var objectId string

		httpRes, err := apiClient.BlogAuthorsAPI.DeleteCmsV3BlogsAuthorsObjectId(context.Background(), objectId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogAuthorsAPIService GetCmsV3BlogsAuthors", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.BlogAuthorsAPI.GetCmsV3BlogsAuthors(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogAuthorsAPIService GetCmsV3BlogsAuthorsObjectId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var objectId string

		resp, httpRes, err := apiClient.BlogAuthorsAPI.GetCmsV3BlogsAuthorsObjectId(context.Background(), objectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogAuthorsAPIService PatchCmsV3BlogsAuthorsObjectId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var objectId string

		resp, httpRes, err := apiClient.BlogAuthorsAPI.PatchCmsV3BlogsAuthorsObjectId(context.Background(), objectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogAuthorsAPIService PostCmsV3BlogsAuthors", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.BlogAuthorsAPI.PostCmsV3BlogsAuthors(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogAuthorsAPIService PostCmsV3BlogsAuthorsBatchArchive", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.BlogAuthorsAPI.PostCmsV3BlogsAuthorsBatchArchive(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogAuthorsAPIService PostCmsV3BlogsAuthorsBatchCreate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.BlogAuthorsAPI.PostCmsV3BlogsAuthorsBatchCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogAuthorsAPIService PostCmsV3BlogsAuthorsBatchRead", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.BlogAuthorsAPI.PostCmsV3BlogsAuthorsBatchRead(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogAuthorsAPIService PostCmsV3BlogsAuthorsBatchUpdate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.BlogAuthorsAPI.PostCmsV3BlogsAuthorsBatchUpdate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogAuthorsAPIService PostCmsV3BlogsAuthorsMultiLanguageAttachToLangGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.BlogAuthorsAPI.PostCmsV3BlogsAuthorsMultiLanguageAttachToLangGroup(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogAuthorsAPIService PostCmsV3BlogsAuthorsMultiLanguageCreateLanguageVariation", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.BlogAuthorsAPI.PostCmsV3BlogsAuthorsMultiLanguageCreateLanguageVariation(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogAuthorsAPIService PostCmsV3BlogsAuthorsMultiLanguageDetachFromLangGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.BlogAuthorsAPI.PostCmsV3BlogsAuthorsMultiLanguageDetachFromLangGroup(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogAuthorsAPIService PostCmsV3BlogsAuthorsMultiLanguageUpdateLanguages", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.BlogAuthorsAPI.PostCmsV3BlogsAuthorsMultiLanguageUpdateLanguages(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogAuthorsAPIService PutCmsV3BlogsAuthorsMultiLanguageSetNewLangPrimary", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.BlogAuthorsAPI.PutCmsV3BlogsAuthorsMultiLanguageSetNewLangPrimary(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
