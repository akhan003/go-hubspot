/*
Communication Preferences Subscriptions

Testing StatusAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package communications_status

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_communications_status_StatusAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test StatusAPIService GetCommunicationPreferencesV3StatusEmailEmailAddress", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var emailAddress string

		resp, httpRes, err := apiClient.StatusAPI.GetCommunicationPreferencesV3StatusEmailEmailAddress(context.Background(), emailAddress).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StatusAPIService PostCommunicationPreferencesV3Subscribe", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.StatusAPI.PostCommunicationPreferencesV3Subscribe(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StatusAPIService PostCommunicationPreferencesV3Unsubscribe", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.StatusAPI.PostCommunicationPreferencesV3Unsubscribe(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
