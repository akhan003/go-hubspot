/*
CMS Performance

Use these endpoints to get a time series view of your website's performance.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package performance

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// PublicPerformanceAPIService PublicPerformanceAPI service
type PublicPerformanceAPIService service

type ApiGetCmsV3PerformanceRequest struct {
	ctx        context.Context
	ApiService *PublicPerformanceAPIService
	domain     *string
	path       *string
	pad        *bool
	sum        *bool
	period     *string
	interval   *string
	start      *int64
	end        *int64
}

// The domain to search return data for.
func (r ApiGetCmsV3PerformanceRequest) Domain(domain string) ApiGetCmsV3PerformanceRequest {
	r.domain = &domain
	return r
}

// The url path of the domain to return data for.
func (r ApiGetCmsV3PerformanceRequest) Path(path string) ApiGetCmsV3PerformanceRequest {
	r.path = &path
	return r
}

// Specifies whether the time series data should have empty intervals if performance data is not present to create a continuous set.
func (r ApiGetCmsV3PerformanceRequest) Pad(pad bool) ApiGetCmsV3PerformanceRequest {
	r.pad = &pad
	return r
}

// Specifies whether the time series data should be summated for the given period. Defaults to false.
func (r ApiGetCmsV3PerformanceRequest) Sum(sum bool) ApiGetCmsV3PerformanceRequest {
	r.sum = &sum
	return r
}

// A relative period to return time series data for. This value is ignored if start and/or end are provided. Valid periods: [15m, 30m, 1h, 4h, 12h, 1d, 1w]
func (r ApiGetCmsV3PerformanceRequest) Period(period string) ApiGetCmsV3PerformanceRequest {
	r.period = &period
	return r
}

// The time series interval to group data by. Valid intervals: [1m, 5m, 15m, 30m, 1h, 4h, 12h, 1d, 1w]
func (r ApiGetCmsV3PerformanceRequest) Interval(interval string) ApiGetCmsV3PerformanceRequest {
	r.interval = &interval
	return r
}

// A timestamp in milliseconds that indicates the start of the time period.
func (r ApiGetCmsV3PerformanceRequest) Start(start int64) ApiGetCmsV3PerformanceRequest {
	r.start = &start
	return r
}

// A timestamp in milliseconds that indicates the end of the time period.
func (r ApiGetCmsV3PerformanceRequest) End(end int64) ApiGetCmsV3PerformanceRequest {
	r.end = &end
	return r
}

func (r ApiGetCmsV3PerformanceRequest) Execute() (*PublicPerformanceResponse, *http.Response, error) {
	return r.ApiService.GetCmsV3PerformanceExecute(r)
}

/*
GetCmsV3Performance View your website's performance.

Returns time series data website performance data for the given domain and/or path.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetCmsV3PerformanceRequest
*/
func (a *PublicPerformanceAPIService) GetCmsV3Performance(ctx context.Context) ApiGetCmsV3PerformanceRequest {
	return ApiGetCmsV3PerformanceRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PublicPerformanceResponse
func (a *PublicPerformanceAPIService) GetCmsV3PerformanceExecute(r ApiGetCmsV3PerformanceRequest) (*PublicPerformanceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PublicPerformanceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PublicPerformanceAPIService.GetCmsV3Performance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cms/v3/performance/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.domain != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "domain", r.domain, "")
	}
	if r.path != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "path", r.path, "")
	}
	if r.pad != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pad", r.pad, "")
	}
	if r.sum != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sum", r.sum, "")
	}
	if r.period != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "period", r.period, "")
	}
	if r.interval != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "interval", r.interval, "")
	}
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps_legacy"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app-legacy"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCmsV3PerformanceUptimeRequest struct {
	ctx        context.Context
	ApiService *PublicPerformanceAPIService
	domain     *string
	path       *string
	pad        *bool
	sum        *bool
	period     *string
	interval   *string
	start      *int64
	end        *int64
}

// The domain to search return data for.
func (r ApiGetCmsV3PerformanceUptimeRequest) Domain(domain string) ApiGetCmsV3PerformanceUptimeRequest {
	r.domain = &domain
	return r
}

func (r ApiGetCmsV3PerformanceUptimeRequest) Path(path string) ApiGetCmsV3PerformanceUptimeRequest {
	r.path = &path
	return r
}

// Specifies whether the time series data should have empty intervals if performance data is not present to create a continuous set.
func (r ApiGetCmsV3PerformanceUptimeRequest) Pad(pad bool) ApiGetCmsV3PerformanceUptimeRequest {
	r.pad = &pad
	return r
}

// Specifies whether the time series data should be summated for the given period. Defaults to false.
func (r ApiGetCmsV3PerformanceUptimeRequest) Sum(sum bool) ApiGetCmsV3PerformanceUptimeRequest {
	r.sum = &sum
	return r
}

// A relative period to return time series data for. This value is ignored if start and/or end are provided. Valid periods: [15m, 30m, 1h, 4h, 12h, 1d, 1w]
func (r ApiGetCmsV3PerformanceUptimeRequest) Period(period string) ApiGetCmsV3PerformanceUptimeRequest {
	r.period = &period
	return r
}

// The time series interval to group data by. Valid intervals: [1m, 5m, 15m, 30m, 1h, 4h, 12h, 1d, 1w]
func (r ApiGetCmsV3PerformanceUptimeRequest) Interval(interval string) ApiGetCmsV3PerformanceUptimeRequest {
	r.interval = &interval
	return r
}

// A timestamp in milliseconds that indicates the start of the time period.
func (r ApiGetCmsV3PerformanceUptimeRequest) Start(start int64) ApiGetCmsV3PerformanceUptimeRequest {
	r.start = &start
	return r
}

// A timestamp in milliseconds that indicates the end of the time period.
func (r ApiGetCmsV3PerformanceUptimeRequest) End(end int64) ApiGetCmsV3PerformanceUptimeRequest {
	r.end = &end
	return r
}

func (r ApiGetCmsV3PerformanceUptimeRequest) Execute() (*PublicPerformanceResponse, *http.Response, error) {
	return r.ApiService.GetCmsV3PerformanceUptimeExecute(r)
}

/*
GetCmsV3PerformanceUptime View your website's uptime.

Returns uptime time series website performance data for the given domain.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetCmsV3PerformanceUptimeRequest
*/
func (a *PublicPerformanceAPIService) GetCmsV3PerformanceUptime(ctx context.Context) ApiGetCmsV3PerformanceUptimeRequest {
	return ApiGetCmsV3PerformanceUptimeRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PublicPerformanceResponse
func (a *PublicPerformanceAPIService) GetCmsV3PerformanceUptimeExecute(r ApiGetCmsV3PerformanceUptimeRequest) (*PublicPerformanceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PublicPerformanceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PublicPerformanceAPIService.GetCmsV3PerformanceUptime")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cms/v3/performance/uptime"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.domain != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "domain", r.domain, "")
	}
	if r.path != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "path", r.path, "")
	}
	if r.pad != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pad", r.pad, "")
	}
	if r.sum != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sum", r.sum, "")
	}
	if r.period != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "period", r.period, "")
	}
	if r.interval != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "interval", r.interval, "")
	}
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps_legacy"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app-legacy"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
