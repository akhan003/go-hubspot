/*
Accounting Extension

Testing CallbacksApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package accounting

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_accounting_CallbacksApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CallbacksApiService CallbackCreateCustomer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var requestId string

		httpRes, err := apiClient.CallbacksApi.CallbackCreateCustomer(context.Background(), requestId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallbacksApiService CallbackCreateExchangeRate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var requestId string

		httpRes, err := apiClient.CallbacksApi.CallbackCreateExchangeRate(context.Background(), requestId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallbacksApiService CallbackCreateInvoice", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var requestId string

		httpRes, err := apiClient.CallbacksApi.CallbackCreateInvoice(context.Background(), requestId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallbacksApiService CallbackCreateTerm", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var requestId string

		httpRes, err := apiClient.CallbacksApi.CallbackCreateTerm(context.Background(), requestId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallbacksApiService CallbackDoInvoiceSearch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var requestId string

		httpRes, err := apiClient.CallbacksApi.CallbackDoInvoiceSearch(context.Background(), requestId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallbacksApiService CallbackDoProductSearch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var requestId string

		httpRes, err := apiClient.CallbacksApi.CallbackDoProductSearch(context.Background(), requestId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallbacksApiService CallbackDoSearchCustomer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var requestId string

		httpRes, err := apiClient.CallbacksApi.CallbackDoSearchCustomer(context.Background(), requestId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallbacksApiService CallbackDoTaxSearch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var requestId string

		httpRes, err := apiClient.CallbacksApi.CallbackDoTaxSearch(context.Background(), requestId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallbacksApiService CallbackGetByID", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var requestId string

		httpRes, err := apiClient.CallbacksApi.CallbackGetByID(context.Background(), requestId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallbacksApiService CallbackInvoicePDF", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var requestId string

		httpRes, err := apiClient.CallbacksApi.CallbackInvoicePDF(context.Background(), requestId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
