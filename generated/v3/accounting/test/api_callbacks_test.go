/*
Accounting Extension

Testing CallbacksAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package accounting

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_accounting_CallbacksAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CallbacksAPIService CallbackCreateCustomer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var requestId string

		httpRes, err := apiClient.CallbacksAPI.CallbackCreateCustomer(context.Background(), requestId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallbacksAPIService CallbackCreateExchangeRate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var requestId string

		httpRes, err := apiClient.CallbacksAPI.CallbackCreateExchangeRate(context.Background(), requestId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallbacksAPIService CallbackCreateInvoice", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var requestId string

		httpRes, err := apiClient.CallbacksAPI.CallbackCreateInvoice(context.Background(), requestId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallbacksAPIService CallbackCreateTerm", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var requestId string

		httpRes, err := apiClient.CallbacksAPI.CallbackCreateTerm(context.Background(), requestId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallbacksAPIService CallbackDoInvoiceSearch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var requestId string

		httpRes, err := apiClient.CallbacksAPI.CallbackDoInvoiceSearch(context.Background(), requestId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallbacksAPIService CallbackDoProductSearch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var requestId string

		httpRes, err := apiClient.CallbacksAPI.CallbackDoProductSearch(context.Background(), requestId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallbacksAPIService CallbackDoSearchCustomer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var requestId string

		httpRes, err := apiClient.CallbacksAPI.CallbackDoSearchCustomer(context.Background(), requestId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallbacksAPIService CallbackDoTaxSearch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var requestId string

		httpRes, err := apiClient.CallbacksAPI.CallbackDoTaxSearch(context.Background(), requestId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallbacksAPIService CallbackGetByID", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var requestId string

		httpRes, err := apiClient.CallbacksAPI.CallbackGetByID(context.Background(), requestId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallbacksAPIService CallbackInvoicePDF", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var requestId string

		httpRes, err := apiClient.CallbacksAPI.CallbackInvoicePDF(context.Background(), requestId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
