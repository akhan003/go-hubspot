/*
Tags

Testing BlogTagsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package tags

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_tags_BlogTagsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BlogTagsAPIService DeleteCmsV3BlogsTagsObjectId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var objectId string

		httpRes, err := apiClient.BlogTagsAPI.DeleteCmsV3BlogsTagsObjectId(context.Background(), objectId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogTagsAPIService GetCmsV3BlogsTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.BlogTagsAPI.GetCmsV3BlogsTags(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogTagsAPIService GetCmsV3BlogsTagsObjectId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var objectId string

		resp, httpRes, err := apiClient.BlogTagsAPI.GetCmsV3BlogsTagsObjectId(context.Background(), objectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogTagsAPIService PatchCmsV3BlogsTagsObjectId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var objectId string

		resp, httpRes, err := apiClient.BlogTagsAPI.PatchCmsV3BlogsTagsObjectId(context.Background(), objectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogTagsAPIService PostCmsV3BlogsTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.BlogTagsAPI.PostCmsV3BlogsTags(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogTagsAPIService PostCmsV3BlogsTagsBatchArchive", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.BlogTagsAPI.PostCmsV3BlogsTagsBatchArchive(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogTagsAPIService PostCmsV3BlogsTagsBatchCreate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.BlogTagsAPI.PostCmsV3BlogsTagsBatchCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogTagsAPIService PostCmsV3BlogsTagsBatchRead", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.BlogTagsAPI.PostCmsV3BlogsTagsBatchRead(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogTagsAPIService PostCmsV3BlogsTagsBatchUpdate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.BlogTagsAPI.PostCmsV3BlogsTagsBatchUpdate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogTagsAPIService PostCmsV3BlogsTagsMultiLanguageAttachToLangGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.BlogTagsAPI.PostCmsV3BlogsTagsMultiLanguageAttachToLangGroup(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogTagsAPIService PostCmsV3BlogsTagsMultiLanguageCreateLanguageVariation", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.BlogTagsAPI.PostCmsV3BlogsTagsMultiLanguageCreateLanguageVariation(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogTagsAPIService PostCmsV3BlogsTagsMultiLanguageDetachFromLangGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.BlogTagsAPI.PostCmsV3BlogsTagsMultiLanguageDetachFromLangGroup(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogTagsAPIService PostCmsV3BlogsTagsMultiLanguageUpdateLanguages", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.BlogTagsAPI.PostCmsV3BlogsTagsMultiLanguageUpdateLanguages(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlogTagsAPIService PutCmsV3BlogsTagsMultiLanguageSetNewLangPrimary", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.BlogTagsAPI.PutCmsV3BlogsTagsMultiLanguageSetNewLangPrimary(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
