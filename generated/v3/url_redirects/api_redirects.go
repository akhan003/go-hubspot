/*
CMS Url Redirects

URL redirect operations

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package url_redirects

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
	"strings"
	"time"
)

// RedirectsAPIService RedirectsAPI service
type RedirectsAPIService service

type ApiDeleteCmsV3UrlRedirectsUrlRedirectIdRequest struct {
	ctx           context.Context
	ApiService    *RedirectsAPIService
	urlRedirectId string
}

func (r ApiDeleteCmsV3UrlRedirectsUrlRedirectIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCmsV3UrlRedirectsUrlRedirectIdExecute(r)
}

/*
DeleteCmsV3UrlRedirectsUrlRedirectId Delete a redirect

Delete one existing redirect, so it is no longer mapped.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param urlRedirectId The ID of the target redirect.
	@return ApiDeleteCmsV3UrlRedirectsUrlRedirectIdRequest
*/
func (a *RedirectsAPIService) DeleteCmsV3UrlRedirectsUrlRedirectId(ctx context.Context, urlRedirectId string) ApiDeleteCmsV3UrlRedirectsUrlRedirectIdRequest {
	return ApiDeleteCmsV3UrlRedirectsUrlRedirectIdRequest{
		ApiService:    a,
		ctx:           ctx,
		urlRedirectId: urlRedirectId,
	}
}

// Execute executes the request
func (a *RedirectsAPIService) DeleteCmsV3UrlRedirectsUrlRedirectIdExecute(r ApiDeleteCmsV3UrlRedirectsUrlRedirectIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RedirectsAPIService.DeleteCmsV3UrlRedirectsUrlRedirectId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cms/v3/url-redirects/{urlRedirectId}"
	localVarPath = strings.Replace(localVarPath, "{"+"urlRedirectId"+"}", url.PathEscape(parameterValueToString(r.urlRedirectId, "urlRedirectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps_legacy"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app-legacy"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCmsV3UrlRedirectsRequest struct {
	ctx           context.Context
	ApiService    *RedirectsAPIService
	createdAt     *time.Time
	createdAfter  *time.Time
	createdBefore *time.Time
	updatedAt     *time.Time
	updatedAfter  *time.Time
	updatedBefore *time.Time
	sort          *[]string
	after         *string
	limit         *int32
	archived      *bool
}

// Only return redirects created on exactly this date.
func (r ApiGetCmsV3UrlRedirectsRequest) CreatedAt(createdAt time.Time) ApiGetCmsV3UrlRedirectsRequest {
	r.createdAt = &createdAt
	return r
}

// Only return redirects created after this date.
func (r ApiGetCmsV3UrlRedirectsRequest) CreatedAfter(createdAfter time.Time) ApiGetCmsV3UrlRedirectsRequest {
	r.createdAfter = &createdAfter
	return r
}

// Only return redirects created before this date.
func (r ApiGetCmsV3UrlRedirectsRequest) CreatedBefore(createdBefore time.Time) ApiGetCmsV3UrlRedirectsRequest {
	r.createdBefore = &createdBefore
	return r
}

// Only return redirects last updated on exactly this date.
func (r ApiGetCmsV3UrlRedirectsRequest) UpdatedAt(updatedAt time.Time) ApiGetCmsV3UrlRedirectsRequest {
	r.updatedAt = &updatedAt
	return r
}

// Only return redirects last updated after this date.
func (r ApiGetCmsV3UrlRedirectsRequest) UpdatedAfter(updatedAfter time.Time) ApiGetCmsV3UrlRedirectsRequest {
	r.updatedAfter = &updatedAfter
	return r
}

// Only return redirects last updated before this date.
func (r ApiGetCmsV3UrlRedirectsRequest) UpdatedBefore(updatedBefore time.Time) ApiGetCmsV3UrlRedirectsRequest {
	r.updatedBefore = &updatedBefore
	return r
}

func (r ApiGetCmsV3UrlRedirectsRequest) Sort(sort []string) ApiGetCmsV3UrlRedirectsRequest {
	r.sort = &sort
	return r
}

// The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results.
func (r ApiGetCmsV3UrlRedirectsRequest) After(after string) ApiGetCmsV3UrlRedirectsRequest {
	r.after = &after
	return r
}

// Maximum number of result per page
func (r ApiGetCmsV3UrlRedirectsRequest) Limit(limit int32) ApiGetCmsV3UrlRedirectsRequest {
	r.limit = &limit
	return r
}

// Whether to return only results that have been archived.
func (r ApiGetCmsV3UrlRedirectsRequest) Archived(archived bool) ApiGetCmsV3UrlRedirectsRequest {
	r.archived = &archived
	return r
}

func (r ApiGetCmsV3UrlRedirectsRequest) Execute() (*CollectionResponseWithTotalUrlMappingForwardPaging, *http.Response, error) {
	return r.ApiService.GetCmsV3UrlRedirectsExecute(r)
}

/*
GetCmsV3UrlRedirects Get current redirects

Returns all existing URL redirects. Results can be limited and filtered by creation or updated date.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetCmsV3UrlRedirectsRequest
*/
func (a *RedirectsAPIService) GetCmsV3UrlRedirects(ctx context.Context) ApiGetCmsV3UrlRedirectsRequest {
	return ApiGetCmsV3UrlRedirectsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CollectionResponseWithTotalUrlMappingForwardPaging
func (a *RedirectsAPIService) GetCmsV3UrlRedirectsExecute(r ApiGetCmsV3UrlRedirectsRequest) (*CollectionResponseWithTotalUrlMappingForwardPaging, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CollectionResponseWithTotalUrlMappingForwardPaging
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RedirectsAPIService.GetCmsV3UrlRedirects")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cms/v3/url-redirects/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.createdAt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createdAt", r.createdAt, "")
	}
	if r.createdAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createdAfter", r.createdAfter, "")
	}
	if r.createdBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createdBefore", r.createdBefore, "")
	}
	if r.updatedAt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updatedAt", r.updatedAt, "")
	}
	if r.updatedAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updatedAfter", r.updatedAfter, "")
	}
	if r.updatedBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updatedBefore", r.updatedBefore, "")
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	}
	if r.after != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "after", r.after, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.archived != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "archived", r.archived, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps_legacy"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app-legacy"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCmsV3UrlRedirectsUrlRedirectIdRequest struct {
	ctx           context.Context
	ApiService    *RedirectsAPIService
	urlRedirectId string
}

func (r ApiGetCmsV3UrlRedirectsUrlRedirectIdRequest) Execute() (*UrlMapping, *http.Response, error) {
	return r.ApiService.GetCmsV3UrlRedirectsUrlRedirectIdExecute(r)
}

/*
GetCmsV3UrlRedirectsUrlRedirectId Get details for a redirect

Returns the details for a single existing URL redirect by ID.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param urlRedirectId The ID of the target redirect.
	@return ApiGetCmsV3UrlRedirectsUrlRedirectIdRequest
*/
func (a *RedirectsAPIService) GetCmsV3UrlRedirectsUrlRedirectId(ctx context.Context, urlRedirectId string) ApiGetCmsV3UrlRedirectsUrlRedirectIdRequest {
	return ApiGetCmsV3UrlRedirectsUrlRedirectIdRequest{
		ApiService:    a,
		ctx:           ctx,
		urlRedirectId: urlRedirectId,
	}
}

// Execute executes the request
//
//	@return UrlMapping
func (a *RedirectsAPIService) GetCmsV3UrlRedirectsUrlRedirectIdExecute(r ApiGetCmsV3UrlRedirectsUrlRedirectIdRequest) (*UrlMapping, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *UrlMapping
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RedirectsAPIService.GetCmsV3UrlRedirectsUrlRedirectId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cms/v3/url-redirects/{urlRedirectId}"
	localVarPath = strings.Replace(localVarPath, "{"+"urlRedirectId"+"}", url.PathEscape(parameterValueToString(r.urlRedirectId, "urlRedirectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps_legacy"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app-legacy"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCmsV3UrlRedirectsUrlRedirectIdRequest struct {
	ctx           context.Context
	ApiService    *RedirectsAPIService
	urlRedirectId string
	urlMapping    *UrlMapping
}

func (r ApiPatchCmsV3UrlRedirectsUrlRedirectIdRequest) UrlMapping(urlMapping UrlMapping) ApiPatchCmsV3UrlRedirectsUrlRedirectIdRequest {
	r.urlMapping = &urlMapping
	return r
}

func (r ApiPatchCmsV3UrlRedirectsUrlRedirectIdRequest) Execute() (*UrlMapping, *http.Response, error) {
	return r.ApiService.PatchCmsV3UrlRedirectsUrlRedirectIdExecute(r)
}

/*
PatchCmsV3UrlRedirectsUrlRedirectId Update a redirect

Updates the settings for an existing URL redirect.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param urlRedirectId
	@return ApiPatchCmsV3UrlRedirectsUrlRedirectIdRequest
*/
func (a *RedirectsAPIService) PatchCmsV3UrlRedirectsUrlRedirectId(ctx context.Context, urlRedirectId string) ApiPatchCmsV3UrlRedirectsUrlRedirectIdRequest {
	return ApiPatchCmsV3UrlRedirectsUrlRedirectIdRequest{
		ApiService:    a,
		ctx:           ctx,
		urlRedirectId: urlRedirectId,
	}
}

// Execute executes the request
//
//	@return UrlMapping
func (a *RedirectsAPIService) PatchCmsV3UrlRedirectsUrlRedirectIdExecute(r ApiPatchCmsV3UrlRedirectsUrlRedirectIdRequest) (*UrlMapping, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *UrlMapping
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RedirectsAPIService.PatchCmsV3UrlRedirectsUrlRedirectId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cms/v3/url-redirects/{urlRedirectId}"
	localVarPath = strings.Replace(localVarPath, "{"+"urlRedirectId"+"}", url.PathEscape(parameterValueToString(r.urlRedirectId, "urlRedirectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.urlMapping == nil {
		return localVarReturnValue, nil, reportError("urlMapping is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.urlMapping
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps_legacy"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app-legacy"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCmsV3UrlRedirectsRequest struct {
	ctx                         context.Context
	ApiService                  *RedirectsAPIService
	urlMappingCreateRequestBody *UrlMappingCreateRequestBody
}

func (r ApiPostCmsV3UrlRedirectsRequest) UrlMappingCreateRequestBody(urlMappingCreateRequestBody UrlMappingCreateRequestBody) ApiPostCmsV3UrlRedirectsRequest {
	r.urlMappingCreateRequestBody = &urlMappingCreateRequestBody
	return r
}

func (r ApiPostCmsV3UrlRedirectsRequest) Execute() (*UrlMapping, *http.Response, error) {
	return r.ApiService.PostCmsV3UrlRedirectsExecute(r)
}

/*
PostCmsV3UrlRedirects Create a redirect

Creates and configures a new URL redirect.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostCmsV3UrlRedirectsRequest
*/
func (a *RedirectsAPIService) PostCmsV3UrlRedirects(ctx context.Context) ApiPostCmsV3UrlRedirectsRequest {
	return ApiPostCmsV3UrlRedirectsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return UrlMapping
func (a *RedirectsAPIService) PostCmsV3UrlRedirectsExecute(r ApiPostCmsV3UrlRedirectsRequest) (*UrlMapping, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *UrlMapping
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RedirectsAPIService.PostCmsV3UrlRedirects")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cms/v3/url-redirects/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.urlMappingCreateRequestBody == nil {
		return localVarReturnValue, nil, reportError("urlMappingCreateRequestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.urlMappingCreateRequestBody
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["private_apps_legacy"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["private-app-legacy"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
