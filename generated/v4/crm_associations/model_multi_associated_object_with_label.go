/*
CrmPublicAssociationsServiceV4

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm_associations

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the MultiAssociatedObjectWithLabel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MultiAssociatedObjectWithLabel{}

// MultiAssociatedObjectWithLabel struct for MultiAssociatedObjectWithLabel
type MultiAssociatedObjectWithLabel struct {
	ToObjectId       int32                      `json:"toObjectId"`
	AssociationTypes []AssociationSpecWithLabel `json:"associationTypes"`
}

type _MultiAssociatedObjectWithLabel MultiAssociatedObjectWithLabel

// NewMultiAssociatedObjectWithLabel instantiates a new MultiAssociatedObjectWithLabel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultiAssociatedObjectWithLabel(toObjectId int32, associationTypes []AssociationSpecWithLabel) *MultiAssociatedObjectWithLabel {
	this := MultiAssociatedObjectWithLabel{}
	this.ToObjectId = toObjectId
	this.AssociationTypes = associationTypes
	return &this
}

// NewMultiAssociatedObjectWithLabelWithDefaults instantiates a new MultiAssociatedObjectWithLabel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultiAssociatedObjectWithLabelWithDefaults() *MultiAssociatedObjectWithLabel {
	this := MultiAssociatedObjectWithLabel{}
	return &this
}

// GetToObjectId returns the ToObjectId field value
func (o *MultiAssociatedObjectWithLabel) GetToObjectId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ToObjectId
}

// GetToObjectIdOk returns a tuple with the ToObjectId field value
// and a boolean to check if the value has been set.
func (o *MultiAssociatedObjectWithLabel) GetToObjectIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToObjectId, true
}

// SetToObjectId sets field value
func (o *MultiAssociatedObjectWithLabel) SetToObjectId(v int32) {
	o.ToObjectId = v
}

// GetAssociationTypes returns the AssociationTypes field value
func (o *MultiAssociatedObjectWithLabel) GetAssociationTypes() []AssociationSpecWithLabel {
	if o == nil {
		var ret []AssociationSpecWithLabel
		return ret
	}

	return o.AssociationTypes
}

// GetAssociationTypesOk returns a tuple with the AssociationTypes field value
// and a boolean to check if the value has been set.
func (o *MultiAssociatedObjectWithLabel) GetAssociationTypesOk() ([]AssociationSpecWithLabel, bool) {
	if o == nil {
		return nil, false
	}
	return o.AssociationTypes, true
}

// SetAssociationTypes sets field value
func (o *MultiAssociatedObjectWithLabel) SetAssociationTypes(v []AssociationSpecWithLabel) {
	o.AssociationTypes = v
}

func (o MultiAssociatedObjectWithLabel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MultiAssociatedObjectWithLabel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["toObjectId"] = o.ToObjectId
	toSerialize["associationTypes"] = o.AssociationTypes
	return toSerialize, nil
}

func (o *MultiAssociatedObjectWithLabel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"toObjectId",
		"associationTypes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMultiAssociatedObjectWithLabel := _MultiAssociatedObjectWithLabel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMultiAssociatedObjectWithLabel)

	if err != nil {
		return err
	}

	*o = MultiAssociatedObjectWithLabel(varMultiAssociatedObjectWithLabel)

	return err
}

type NullableMultiAssociatedObjectWithLabel struct {
	value *MultiAssociatedObjectWithLabel
	isSet bool
}

func (v NullableMultiAssociatedObjectWithLabel) Get() *MultiAssociatedObjectWithLabel {
	return v.value
}

func (v *NullableMultiAssociatedObjectWithLabel) Set(val *MultiAssociatedObjectWithLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableMultiAssociatedObjectWithLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableMultiAssociatedObjectWithLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultiAssociatedObjectWithLabel(val *MultiAssociatedObjectWithLabel) *NullableMultiAssociatedObjectWithLabel {
	return &NullableMultiAssociatedObjectWithLabel{value: val, isSet: true}
}

func (v NullableMultiAssociatedObjectWithLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultiAssociatedObjectWithLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
