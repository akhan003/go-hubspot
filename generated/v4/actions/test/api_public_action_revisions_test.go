/*
Actions V4

Testing PublicActionRevisionsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package actions

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_actions_PublicActionRevisionsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PublicActionRevisionsAPIService GetAutomationV4ActionsAppIdDefinitionIdRevisions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var definitionId string
		var appId int32

		resp, httpRes, err := apiClient.PublicActionRevisionsAPI.GetAutomationV4ActionsAppIdDefinitionIdRevisions(context.Background(), definitionId, appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PublicActionRevisionsAPIService GetAutomationV4ActionsAppIdDefinitionIdRevisionsRevisionId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var definitionId string
		var revisionId string
		var appId int32

		resp, httpRes, err := apiClient.PublicActionRevisionsAPI.GetAutomationV4ActionsAppIdDefinitionIdRevisionsRevisionId(context.Background(), definitionId, revisionId, appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
