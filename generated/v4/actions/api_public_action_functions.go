/*
Actions V4

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package actions

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// PublicActionFunctionsAPIService PublicActionFunctionsAPI service
type PublicActionFunctionsAPIService service

type ApiDeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeRequest struct {
	ctx          context.Context
	ApiService   *PublicActionFunctionsAPIService
	definitionId string
	functionType string
	appId        int32
}

func (r ApiDeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeExecute(r)
}

/*
DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionType Method for DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param definitionId
	@param functionType
	@param appId
	@return ApiDeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeRequest
*/
func (a *PublicActionFunctionsAPIService) DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionType(ctx context.Context, definitionId string, functionType string, appId int32) ApiDeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeRequest {
	return ApiDeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeRequest{
		ApiService:   a,
		ctx:          ctx,
		definitionId: definitionId,
		functionType: functionType,
		appId:        appId,
	}
}

// Execute executes the request
func (a *PublicActionFunctionsAPIService) DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeExecute(r ApiDeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PublicActionFunctionsAPIService.DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionType")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/automation/v4/actions/{appId}/{definitionId}/functions/{functionType}"
	localVarPath = strings.Replace(localVarPath, "{"+"definitionId"+"}", url.PathEscape(parameterValueToString(r.definitionId, "definitionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"functionType"+"}", url.PathEscape(parameterValueToString(r.functionType, "functionType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appId"+"}", url.PathEscape(parameterValueToString(r.appId, "appId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["developer_hapikey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("hapikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdRequest struct {
	ctx          context.Context
	ApiService   *PublicActionFunctionsAPIService
	definitionId string
	functionType string
	functionId   string
	appId        int32
}

func (r ApiDeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdExecute(r)
}

/*
DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionId Method for DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionId

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param definitionId
	@param functionType
	@param functionId
	@param appId
	@return ApiDeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdRequest
*/
func (a *PublicActionFunctionsAPIService) DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionId(ctx context.Context, definitionId string, functionType string, functionId string, appId int32) ApiDeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdRequest {
	return ApiDeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdRequest{
		ApiService:   a,
		ctx:          ctx,
		definitionId: definitionId,
		functionType: functionType,
		functionId:   functionId,
		appId:        appId,
	}
}

// Execute executes the request
func (a *PublicActionFunctionsAPIService) DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdExecute(r ApiDeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PublicActionFunctionsAPIService.DeleteAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/automation/v4/actions/{appId}/{definitionId}/functions/{functionType}/{functionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"definitionId"+"}", url.PathEscape(parameterValueToString(r.definitionId, "definitionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"functionType"+"}", url.PathEscape(parameterValueToString(r.functionType, "functionType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"functionId"+"}", url.PathEscape(parameterValueToString(r.functionId, "functionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appId"+"}", url.PathEscape(parameterValueToString(r.appId, "appId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["developer_hapikey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("hapikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAutomationV4ActionsAppIdDefinitionIdFunctionsRequest struct {
	ctx          context.Context
	ApiService   *PublicActionFunctionsAPIService
	definitionId string
	appId        int32
}

func (r ApiGetAutomationV4ActionsAppIdDefinitionIdFunctionsRequest) Execute() (*CollectionResponsePublicActionFunctionIdentifierNoPaging, *http.Response, error) {
	return r.ApiService.GetAutomationV4ActionsAppIdDefinitionIdFunctionsExecute(r)
}

/*
GetAutomationV4ActionsAppIdDefinitionIdFunctions Method for GetAutomationV4ActionsAppIdDefinitionIdFunctions

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param definitionId
	@param appId
	@return ApiGetAutomationV4ActionsAppIdDefinitionIdFunctionsRequest
*/
func (a *PublicActionFunctionsAPIService) GetAutomationV4ActionsAppIdDefinitionIdFunctions(ctx context.Context, definitionId string, appId int32) ApiGetAutomationV4ActionsAppIdDefinitionIdFunctionsRequest {
	return ApiGetAutomationV4ActionsAppIdDefinitionIdFunctionsRequest{
		ApiService:   a,
		ctx:          ctx,
		definitionId: definitionId,
		appId:        appId,
	}
}

// Execute executes the request
//
//	@return CollectionResponsePublicActionFunctionIdentifierNoPaging
func (a *PublicActionFunctionsAPIService) GetAutomationV4ActionsAppIdDefinitionIdFunctionsExecute(r ApiGetAutomationV4ActionsAppIdDefinitionIdFunctionsRequest) (*CollectionResponsePublicActionFunctionIdentifierNoPaging, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CollectionResponsePublicActionFunctionIdentifierNoPaging
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PublicActionFunctionsAPIService.GetAutomationV4ActionsAppIdDefinitionIdFunctions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/automation/v4/actions/{appId}/{definitionId}/functions"
	localVarPath = strings.Replace(localVarPath, "{"+"definitionId"+"}", url.PathEscape(parameterValueToString(r.definitionId, "definitionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appId"+"}", url.PathEscape(parameterValueToString(r.appId, "appId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["developer_hapikey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("hapikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeRequest struct {
	ctx          context.Context
	ApiService   *PublicActionFunctionsAPIService
	definitionId string
	functionType string
	appId        int32
}

func (r ApiGetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeRequest) Execute() (*PublicActionFunction, *http.Response, error) {
	return r.ApiService.GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeExecute(r)
}

/*
GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionType Method for GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param definitionId
	@param functionType
	@param appId
	@return ApiGetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeRequest
*/
func (a *PublicActionFunctionsAPIService) GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionType(ctx context.Context, definitionId string, functionType string, appId int32) ApiGetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeRequest {
	return ApiGetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeRequest{
		ApiService:   a,
		ctx:          ctx,
		definitionId: definitionId,
		functionType: functionType,
		appId:        appId,
	}
}

// Execute executes the request
//
//	@return PublicActionFunction
func (a *PublicActionFunctionsAPIService) GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeExecute(r ApiGetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeRequest) (*PublicActionFunction, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PublicActionFunction
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PublicActionFunctionsAPIService.GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/automation/v4/actions/{appId}/{definitionId}/functions/{functionType}"
	localVarPath = strings.Replace(localVarPath, "{"+"definitionId"+"}", url.PathEscape(parameterValueToString(r.definitionId, "definitionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"functionType"+"}", url.PathEscape(parameterValueToString(r.functionType, "functionType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appId"+"}", url.PathEscape(parameterValueToString(r.appId, "appId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["developer_hapikey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("hapikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdRequest struct {
	ctx          context.Context
	ApiService   *PublicActionFunctionsAPIService
	definitionId string
	functionType string
	functionId   string
	appId        int32
}

func (r ApiGetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdRequest) Execute() (*PublicActionFunction, *http.Response, error) {
	return r.ApiService.GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdExecute(r)
}

/*
GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionId Method for GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionId

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param definitionId
	@param functionType
	@param functionId
	@param appId
	@return ApiGetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdRequest
*/
func (a *PublicActionFunctionsAPIService) GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionId(ctx context.Context, definitionId string, functionType string, functionId string, appId int32) ApiGetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdRequest {
	return ApiGetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdRequest{
		ApiService:   a,
		ctx:          ctx,
		definitionId: definitionId,
		functionType: functionType,
		functionId:   functionId,
		appId:        appId,
	}
}

// Execute executes the request
//
//	@return PublicActionFunction
func (a *PublicActionFunctionsAPIService) GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdExecute(r ApiGetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdRequest) (*PublicActionFunction, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PublicActionFunction
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PublicActionFunctionsAPIService.GetAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/automation/v4/actions/{appId}/{definitionId}/functions/{functionType}/{functionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"definitionId"+"}", url.PathEscape(parameterValueToString(r.definitionId, "definitionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"functionType"+"}", url.PathEscape(parameterValueToString(r.functionType, "functionType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"functionId"+"}", url.PathEscape(parameterValueToString(r.functionId, "functionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appId"+"}", url.PathEscape(parameterValueToString(r.appId, "appId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["developer_hapikey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("hapikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeRequest struct {
	ctx          context.Context
	ApiService   *PublicActionFunctionsAPIService
	definitionId string
	functionType string
	appId        int32
	body         *string
}

func (r ApiPutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeRequest) Body(body string) ApiPutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeRequest {
	r.body = &body
	return r
}

func (r ApiPutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeRequest) Execute() (*PublicActionFunctionIdentifier, *http.Response, error) {
	return r.ApiService.PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeExecute(r)
}

/*
PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionType Method for PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param definitionId
	@param functionType
	@param appId
	@return ApiPutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeRequest
*/
func (a *PublicActionFunctionsAPIService) PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionType(ctx context.Context, definitionId string, functionType string, appId int32) ApiPutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeRequest {
	return ApiPutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeRequest{
		ApiService:   a,
		ctx:          ctx,
		definitionId: definitionId,
		functionType: functionType,
		appId:        appId,
	}
}

// Execute executes the request
//
//	@return PublicActionFunctionIdentifier
func (a *PublicActionFunctionsAPIService) PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeExecute(r ApiPutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeRequest) (*PublicActionFunctionIdentifier, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PublicActionFunctionIdentifier
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PublicActionFunctionsAPIService.PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/automation/v4/actions/{appId}/{definitionId}/functions/{functionType}"
	localVarPath = strings.Replace(localVarPath, "{"+"definitionId"+"}", url.PathEscape(parameterValueToString(r.definitionId, "definitionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"functionType"+"}", url.PathEscape(parameterValueToString(r.functionType, "functionType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appId"+"}", url.PathEscape(parameterValueToString(r.appId, "appId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"text/plain"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["developer_hapikey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("hapikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdRequest struct {
	ctx          context.Context
	ApiService   *PublicActionFunctionsAPIService
	definitionId string
	functionType string
	functionId   string
	appId        int32
	body         *string
}

func (r ApiPutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdRequest) Body(body string) ApiPutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdRequest {
	r.body = &body
	return r
}

func (r ApiPutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdRequest) Execute() (*PublicActionFunctionIdentifier, *http.Response, error) {
	return r.ApiService.PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdExecute(r)
}

/*
PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionId Method for PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionId

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param definitionId
	@param functionType
	@param functionId
	@param appId
	@return ApiPutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdRequest
*/
func (a *PublicActionFunctionsAPIService) PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionId(ctx context.Context, definitionId string, functionType string, functionId string, appId int32) ApiPutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdRequest {
	return ApiPutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdRequest{
		ApiService:   a,
		ctx:          ctx,
		definitionId: definitionId,
		functionType: functionType,
		functionId:   functionId,
		appId:        appId,
	}
}

// Execute executes the request
//
//	@return PublicActionFunctionIdentifier
func (a *PublicActionFunctionsAPIService) PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdExecute(r ApiPutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionIdRequest) (*PublicActionFunctionIdentifier, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PublicActionFunctionIdentifier
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PublicActionFunctionsAPIService.PutAutomationV4ActionsAppIdDefinitionIdFunctionsFunctionTypeFunctionId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/automation/v4/actions/{appId}/{definitionId}/functions/{functionType}/{functionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"definitionId"+"}", url.PathEscape(parameterValueToString(r.definitionId, "definitionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"functionType"+"}", url.PathEscape(parameterValueToString(r.functionType, "functionType")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"functionId"+"}", url.PathEscape(parameterValueToString(r.functionId, "functionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appId"+"}", url.PathEscape(parameterValueToString(r.appId, "appId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"text/plain"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["developer_hapikey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("hapikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
