/*
Actions V4

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package actions

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// PublicActionRevisionsAPIService PublicActionRevisionsAPI service
type PublicActionRevisionsAPIService service

type ApiGetAutomationV4ActionsAppIdDefinitionIdRevisionsRequest struct {
	ctx          context.Context
	ApiService   *PublicActionRevisionsAPIService
	definitionId string
	appId        int32
	limit        *int32
	after        *string
}

// The maximum number of results to display per page.
func (r ApiGetAutomationV4ActionsAppIdDefinitionIdRevisionsRequest) Limit(limit int32) ApiGetAutomationV4ActionsAppIdDefinitionIdRevisionsRequest {
	r.limit = &limit
	return r
}

// The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results.
func (r ApiGetAutomationV4ActionsAppIdDefinitionIdRevisionsRequest) After(after string) ApiGetAutomationV4ActionsAppIdDefinitionIdRevisionsRequest {
	r.after = &after
	return r
}

func (r ApiGetAutomationV4ActionsAppIdDefinitionIdRevisionsRequest) Execute() (*CollectionResponsePublicActionRevisionForwardPaging, *http.Response, error) {
	return r.ApiService.GetAutomationV4ActionsAppIdDefinitionIdRevisionsExecute(r)
}

/*
GetAutomationV4ActionsAppIdDefinitionIdRevisions Method for GetAutomationV4ActionsAppIdDefinitionIdRevisions

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param definitionId
	@param appId
	@return ApiGetAutomationV4ActionsAppIdDefinitionIdRevisionsRequest
*/
func (a *PublicActionRevisionsAPIService) GetAutomationV4ActionsAppIdDefinitionIdRevisions(ctx context.Context, definitionId string, appId int32) ApiGetAutomationV4ActionsAppIdDefinitionIdRevisionsRequest {
	return ApiGetAutomationV4ActionsAppIdDefinitionIdRevisionsRequest{
		ApiService:   a,
		ctx:          ctx,
		definitionId: definitionId,
		appId:        appId,
	}
}

// Execute executes the request
//
//	@return CollectionResponsePublicActionRevisionForwardPaging
func (a *PublicActionRevisionsAPIService) GetAutomationV4ActionsAppIdDefinitionIdRevisionsExecute(r ApiGetAutomationV4ActionsAppIdDefinitionIdRevisionsRequest) (*CollectionResponsePublicActionRevisionForwardPaging, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CollectionResponsePublicActionRevisionForwardPaging
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PublicActionRevisionsAPIService.GetAutomationV4ActionsAppIdDefinitionIdRevisions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/automation/v4/actions/{appId}/{definitionId}/revisions"
	localVarPath = strings.Replace(localVarPath, "{"+"definitionId"+"}", url.PathEscape(parameterValueToString(r.definitionId, "definitionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appId"+"}", url.PathEscape(parameterValueToString(r.appId, "appId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.after != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "after", r.after, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["developer_hapikey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("hapikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAutomationV4ActionsAppIdDefinitionIdRevisionsRevisionIdRequest struct {
	ctx          context.Context
	ApiService   *PublicActionRevisionsAPIService
	definitionId string
	revisionId   string
	appId        int32
}

func (r ApiGetAutomationV4ActionsAppIdDefinitionIdRevisionsRevisionIdRequest) Execute() (*PublicActionRevision, *http.Response, error) {
	return r.ApiService.GetAutomationV4ActionsAppIdDefinitionIdRevisionsRevisionIdExecute(r)
}

/*
GetAutomationV4ActionsAppIdDefinitionIdRevisionsRevisionId Method for GetAutomationV4ActionsAppIdDefinitionIdRevisionsRevisionId

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param definitionId
	@param revisionId
	@param appId
	@return ApiGetAutomationV4ActionsAppIdDefinitionIdRevisionsRevisionIdRequest
*/
func (a *PublicActionRevisionsAPIService) GetAutomationV4ActionsAppIdDefinitionIdRevisionsRevisionId(ctx context.Context, definitionId string, revisionId string, appId int32) ApiGetAutomationV4ActionsAppIdDefinitionIdRevisionsRevisionIdRequest {
	return ApiGetAutomationV4ActionsAppIdDefinitionIdRevisionsRevisionIdRequest{
		ApiService:   a,
		ctx:          ctx,
		definitionId: definitionId,
		revisionId:   revisionId,
		appId:        appId,
	}
}

// Execute executes the request
//
//	@return PublicActionRevision
func (a *PublicActionRevisionsAPIService) GetAutomationV4ActionsAppIdDefinitionIdRevisionsRevisionIdExecute(r ApiGetAutomationV4ActionsAppIdDefinitionIdRevisionsRevisionIdRequest) (*PublicActionRevision, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PublicActionRevision
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PublicActionRevisionsAPIService.GetAutomationV4ActionsAppIdDefinitionIdRevisionsRevisionId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/automation/v4/actions/{appId}/{definitionId}/revisions/{revisionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"definitionId"+"}", url.PathEscape(parameterValueToString(r.definitionId, "definitionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"revisionId"+"}", url.PathEscape(parameterValueToString(r.revisionId, "revisionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appId"+"}", url.PathEscape(parameterValueToString(r.appId, "appId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["developer_hapikey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("hapikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
